{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Brahe","text":"<p> Brahe - easy-to-learn, high-performance, and quick-to-deploy </p> <p> </p> <p>Documentation: https://duncaneddy.github.io/brahe</p> <p>Rust Library Reference: https://docs.rs/crate/brahe/latest</p> <p>Source Code: https://github.com/duncaneddy/brahe</p>"},{"location":"index.html#overhaul-notice","title":"Overhaul Notice","text":"<p>The older pure-Python version of brahe is currently being deprecated in favor of a mixed Rust-Python implementation, along with improved documentation. That means that the development on the <code>master</code> branch is being frozen and will no longer be developed against. Moving forward the <code>main</code> branch will be the primary branch for the project.</p> <p>There will be point commits (less than <code>1.0.0</code>) during this period as part of improving the CI/CD workflow for the project. Furthermore, initially the features of the new implementation will not be at partity with the old python implementation, so users should pin their requirements file to use the latest commit of the master branch:</p> <pre><code>brahe @ git+https://github.com/duncaneddy/brahe@master\n</code></pre> <p>To install and use the latest master branch via pip</p> <pre><code>pip install git+https://github.com/duncaneddy/brahe.git@master\n</code></pre> <p>The old master branch can be found here.</p>"},{"location":"index.html#brahe","title":"Brahe","text":"<p>Brahe is a modern satellite dynamics library for research and engineering applications. It is designed to be easy-to-learn, high-performance, and quick-to-deploy.  The north-star of the development is enabling users to solve meaningful problems  and answer questions quickly, easily, and correctly.</p> <p>The key features of the library are:</p> <ul> <li>Intuitive API: API designed to be easily composable, making it easy to    solve complex problems correctly by building on core functionality.</li> <li>Easy-to-Learn: Designed to be easy to use and learn. The objective is   to provide clear documentation and visibility into what the software is doing   so that users don't need to spend time reverse engineering internal routines   and more time solving their own problems.</li> <li>High-Performance: Brahe provides a Python 3.6+ wrapper that is   auto-generated from a core Rust library. This provides fast core implementation,   while allowing users to take advantage of Python's rich scientific ecosystem   if they so choose.</li> <li>Answer Questions Quickly: Brahe is designed to make it easy to code up   solutions to meaningful problems. High-fieldity, high-performance APIs are not   the end-objective, but helping users solve their problems.</li> </ul> <p>Brahe gets its name from the combination of Rust and astrodynamics (Rust +  astrodynamics = Brahe). The library specifically focuses on satellite astrodynamics and space mission analysis. While the underlying concepts have been studied and known since  Kepler wrote down his three laws, there are few modern software  libraries that make these concepts easily accessible. While extremely well tested, other astrodynamics and mission analysis software can have an extremely steep  learning curve, making it difficult to quickly run simple analysis that is known to be correct.</p> <p>Because of this, students, researchers, and engineers frequently end up  reimplementing common astrodynamics and mission analysis tools with unfortunately  frequent regularity. While  reimplementation of common code can be a good learning  mechanisms, in most cases it is both error-prone and costs time better spent  on other endeavours. This project seeks to providing an easy-to-use,  well-tested library, to enable everyone to more easily, and quickly  perform astrodynamics and space mission analysis without sacrificing performance or correctness. The software built in Rust for performance with bindings to  Python for ease of use.</p> <p>The implementation approach is opinionated, the objective is to provide an easy-to-use and accurate astrodynamics library to enable users to quickly and correctly solve most common problem types. it is not practical to try to  implement every aerodynamics model and function utilized in practice or historically. Since Brahe is open source, if a specific function is not present, or a different  implementation is required, users can modify the code to address their specific  use case. This means that Brahe, while we want to continue expanding the  capabilities of the module over time, the immediate goal is to provide a well-tested,  flexible, composable API to quickly address modern problems in astrodynamics.</p> <p>One example of this in practice is that the built-in Earth reference frame transformation  utilizes the IAU 2006/2000A precession-nutation model, CIO-based transformation. Even through there are multiple ways to construct this transformation, Brahe  only implements one. Another example, is that the geodetic and geocentric  transformations use the latest NIMA technical report definitions for Earth's radius and flatness. If a desired model isn't implemented users are free to extend the software to  address and functionality or modeling gaps that exist to address their specific application.</p>"},{"location":"index.html#documentation","title":"Documentation","text":"<p>You can find the package documentation here. This documentation is meant to provide a human-friendly walk through of the software and package. Brahe is currently in the early stages of development so the documentation will likely not be complete. Sections marked [WIP] will have some software functionality implemented but not be considered documented.</p> <p>The most complete API reference guide will always be the Rust crate API  reference, found on crates.io. This is always up-to-date with the latest release  since it is autogenerated at build time during the release process.</p>"},{"location":"index.html#software-usage-and-license","title":"Software Usage and License","text":"<p>The Brahe package is licensed and distributed under an MIT License to encourage adoption and to make it easy to integrate with other tools.</p> <p>The only thing asked is that if you do use the package in your work, or appreciate the project, either send a message or star the project. Knowing that the project is being actively used is a large motivator for continued development.</p>"},{"location":"index.html#support-and-acknowledgement","title":"Support and Acknowledgement","text":"<p>Brahe is currently being developed primarily for my own enjoyment and because I find having these tools helpful in professional and hobby work. I plan to continue developing it for the time being regardless of greater adoption as time permitting.</p> <p>That being said, it's incredibly encouraging and useful to know if the software is being adopted or found useful in wider practice. If you're using Brahe for school, research, or a commercial endeavour, I'd love to know about it! Tweet me @duncaneddy or email me at duncan.eddy (at) gmail.com.</p>"},{"location":"about/index.html","title":"About","text":"<p>This section provides additional information about the project.</p>"},{"location":"about/contact.html","title":"Contact","text":"<p>For private inquries about the project or development I can be reached at:</p> <ul> <li>Email duncan.eddy (at that small google-operated email service)</li> <li>LinkedIn Duncan Eddy</li> <li>Personal Website duncaneddy.com</li> </ul>"},{"location":"about/contributing.html","title":"Contribution","text":"<p>We welcome contributions from external users, individuals, and organizations to the project. If you are interested in starting contributing </p>"},{"location":"about/contributing.html#pull-request-template","title":"Pull Request Template","text":"<p>The project recommends using </p> <pre><code>## Summary\n\n{{ Provide a clear summary of the problem this pull request addresses }}\n\n### Attention Areas\n\n{{ Optional Section: Call out any specific areas the reviewers should pay attention to. Any contentious or critical design and implementation decisions should be listed here}}\n\n1. This changes how the entire package works\n2. This CR solves ABC by doing DEF, but that might affect XYZ\n\n----\n\n## Change Description\n\n{{ Provide a bulletted listed of the items changed }}\n\n1. This pull request template\n\n----\n\n## Testing\n\n{{ How was this pull request tested? }}\n\n- [ ] Test suite passes\n- [ ] Unit tests addded\n- [ ] No testing performed \n\n----\n\n## Revisions\n\n{{ List modifications to this pull request between revisions. First revision can simply be initial commit }}\n\nRevision 1:\n\n- Initial submission\n\n----\n\n## Related Issues\n\n{{ Optional Section, Link any related issues }}\n\n- Issue 1: \n\n</code></pre>"},{"location":"about/contributing.html#rust-docstring-template","title":"Rust Docstring Template","text":"<p>New functions implemented in rust are expected to use the following docstring to standardize information on functions to enable users to more easily navigate and learn the library.</p> <pre><code>{{ Function Description }}\n\n## Arguments\n\n* `argument_name`: {{ Arugment description}}. Units: {{ Optional, Units as (value). e.g. (rad) or (deg)}}\n\n## Returns\n\n* `value_name`: {{ Value description}}. Units: {{ Optional, Units as (value). e.g. (rad) or (deg)}}\n\n## Examples\n\\`\\`\\`\n{{ Implement shor function in language }}\n\\`\\`\\`\n\n## References:\n1. {{ author, *title/journal*, pp. page_number, eq. equation_number, year}}\n2. O. Montenbruck, and E. Gill, *Satellite Orbits: Models, Methods and Applications*, pp. 24, eq. 2.43 &amp; 2.44, 2012.\n</code></pre>"},{"location":"about/design_decisions.html","title":"Design Decisions","text":"<p>This page documents significant design decisions of the library.</p>"},{"location":"about/design_decisions.html#default-64-bit-floating-point-functions","title":"Default 64-bit Floating Point Functions","text":"<p>There is a decision to be made as to whether to support both 32-bit and 64-bit operations for all standard functions that could be used with either type. However, this results in duplicating a large amount of code as Rust does not support overloading primitive types. While some space missions may use lower-precision processors that do not support 64-bit floating point operations, the majority of modern computers and processors do support 64-bit floating point operations. Furthermore, the primary focus of this library is for us in terrestrial applications, and analysis, or space-processors that do support 64-bit floating point operations.</p> <p>Therefore, the decision is to only support 64-bit floating point operations for the time being.</p>"},{"location":"about/design_decisions.html#inline-pyo3-annotations-vs-written-wrappers","title":"Inline PyO3 Annotations vs Written Wrappers","text":"<p>There is a decision to use PyO3 macros to generate Python bindings or  to write them manually. Currently, the decision is to write them manually to have more control over the generated code and be able to more easily navigate issues related to type conversions that can arise. As a secondary benefit separate python-formatted docstrings can be written for the new functions.</p> <p>PyO3 macros would ultimately be preferable to reduce duplication of code, the  amount of boilerplate, and to make the code more maintainable. However, at the current time the complexity and difficulty to get them working is not worth the effort. This decision may be revisited in the future, and any change  proposals and pull requests to use PyO3 macros are welcome.</p>"},{"location":"about/license.html","title":"License","text":"<p>Brahe is released under a commercially-permissive MIT License that can be found here.</p> <p>The reason is so that individuals, studens, and companies can stop reinventing the wheel to get access to useful software that solves common problems without paying prohibitive amounts of money.</p>"},{"location":"about/roadmap.html","title":"Roadmap","text":"<p>This section contains information</p> <ul> <li>[ ] Constants<ul> <li>[ ] Mathematics</li> <li>[ ] Time</li> <li>[ ] Planetary Constants</li> </ul> </li> <li>[ ] Earth Orientation Parameters<ul> <li>[ ] Data Model Structure</li> <li>[ ] Fetching updated parameters</li> <li>[ ] Data retrieval</li> <li>[ ] Customized of handling of out-of-range EOP requests</li> </ul> </li> <li>[ ] Time Management (Epoch)<ul> <li>[ ] Duration Class</li> <li>[ ] Epoch Class</li> <li>[ ] Epoch Range Iterator</li> </ul> </li> <li>[ ] Reference Frames</li> <li>[ ] Attitude Representations<ul> <li>[ ] Rotation Matrices</li> <li>[ ] Quaternions</li> <li>[ ] Euler Axis</li> <li>[ ] Euler Angle</li> </ul> </li> <li>[ ] Orbits<ul> <li>[ ] Orbital Period</li> <li>[ ] Mean Motion</li> <li>[ ] Periapsis/Apoapsis Velocity</li> <li>[ ] Perigee/Apogee Velocity</li> <li>[ ] Periapsis/Apoapsis Distance</li> <li>[ ] Anomaly True &lt;-&gt; Eccentric</li> <li>[ ] Anomaly Eccentric &lt;-&gt; Mean</li> <li>[ ] Anomaly True &lt;-&gt; Mean</li> <li>[ ] Sun-synchronous Inclination</li> <li>[ ] Osculating &lt;-&gt; Mean Transformation</li> </ul> </li> <li>[ ] Coordinate Transform</li> <li>[ ] Keplerian Elements</li> <li>[ ] Non-singular Elements</li> <li>[ ] Geocentric</li> <li>[ ] Geodetic</li> <li>[ ] Topocentric</li> <li>[ ] Relative Cartesian Representation</li> <li>[ ] Relative Orbital Elements</li> <li>[ ] SpaceTrack Client<ul> <li>[ ] TLE Download </li> <li>[ ] GP Download</li> <li>[ ] SP Upload</li> <li>[ ] Maneuver Screening Result Download</li> <li>[ ] Maneuver Upload</li> </ul> </li> <li>[ ] TLE<ul> <li>[ ] TLE Object</li> <li>[ ] SGP4 Propagation</li> </ul> </li> <li>[ ] Force Modeling<ul> <li>[ ] Gravity<ul> <li>[ ] Point Gravity</li> <li>[ ] Spherical Harmonic</li> <li>[ ] Third-Body Gravity</li> </ul> </li> <li>[ ] Solar Radiation Pressure<ul> <li>[ ] Direct Sun</li> <li>[ ] Earth Albedo</li> </ul> </li> <li>[ ] Eclipse Models<ul> <li>[ ] Cylindrical</li> <li>[ ] Conical</li> </ul> </li> <li>[ ] Drag Model<ul> <li>[ ] Harris Priester</li> <li>[ ] NRLMSISE-00</li> <li>[ ] NRLMSIS 2.0</li> <li>[ ] DTM2013</li> </ul> </li> <li>[ ] Relativistic Corrections</li> <li>[ ] Tides <ul> <li>[ ] Solid Earth</li> <li>[ ] Ocean</li> </ul> </li> </ul> </li> <li>[ ] Numerical Integrators<ul> <li>[ ] Arbitrary RK integrator<ul> <li>[ ] RK4</li> <li>[ ] RK8</li> </ul> </li> <li>[ ] Variable Step, Variable Order</li> </ul> </li> <li>[ ] Orbit Propagators<ul> <li>[ ] Keplerian</li> <li>[ ] Full Force</li> <li>[ ] Event Detection</li> <li>[ ] Arbitrary Force/Function Inclusion</li> </ul> </li> <li>[ ] Orbit Data Handlers<ul> <li>[ ] Interpolation</li> <li>[ ] SP3</li> <li>[ ] CCSDS OEM</li> </ul> </li> <li>[ ] Access<ul> <li>[ ] Access Predictor</li> <li>[ ] Tessellation (Area Access)</li> <li>[ ] Access Constraint Functions</li> <li>[ ] Contact Prediction</li> <li>[ ] Collect Prediction</li> </ul> </li> <li>[ ] Estimation<ul> <li>[ ] EKF</li> <li>[ ] UKF</li> <li>[ ] Batch Least-Squares</li> </ul> </li> <li>[ ] Analysis &amp; Visualization</li> </ul>"},{"location":"getting_started/index.html","title":"Getting Started","text":"<p>Welcome to the documentation for Brahe. This documentation is designed to help you get up and running with the project  as quickly as possible. It is designed to walk you through getting setup and running step by step. It provides examples of using the library to solve common problems. It is not meant to be an exhaustive reference of all library  functions. For that see the Rust and Python API references.</p>"},{"location":"getting_started/contact_prediction.html","title":"Contact Prediction","text":""},{"location":"getting_started/first_script.html","title":"First Script","text":""},{"location":"getting_started/frame_conversion.html","title":"Frame Conversion","text":""},{"location":"getting_started/installation.html","title":"Installation","text":""},{"location":"getting_started/installation.html#rust","title":"Rust","text":""},{"location":"getting_started/installation.html#python","title":"Python","text":""},{"location":"getting_started/orbit_prediction.html","title":"Orbit Prediction","text":""},{"location":"getting_started/tle_download.html","title":"TLE Downloading","text":""},{"location":"library_api/index.html","title":"Library API","text":""},{"location":"reference/index.html","title":"Reference","text":""},{"location":"reference/constants.html","title":"Constants","text":"<p>The Constants module provides frequently occuring fundamental mathematical  and astronomical constants.</p>"},{"location":"reference/constants.html#mathematical","title":"Mathematical","text":"<p>Mathematical constants provide quick-reference to common factors.</p> Constant Description <code>DEG2RAD</code> Factor to convert from degrees and radians. <code>RAD2DEG</code> Factor to convert from radians to degrees. <code>AS2RAD</code> Factor to convert from arc-seconds to radians. <code>RAD2AS</code> Factor to convert from radians to arc-seconds."},{"location":"reference/constants.html#time","title":"Time","text":"<p>Time constants are used for conversions between different time systems.</p> Constant Description Value Units Source <code>MJD_ZERO</code> Offset between Modified Julian Date and Julian Date time scales. $t_{mjd} + {mjd}{0} = t{jd}$ $2400000.5$ Days Montenbruck and Gill <sup>1</sup> <code>MJD2000</code> Modified Julian date of J2000 Epoch. January 1, 2000 12:00:00. $51544.5$ Days Montenbruck and Gill <sup>1</sup> <code>GPS_TAI</code> Constant offset from TAI to GPS time scale. $t_{gps} = t_{tai} + \\Delta_{GPS-TAI}$ $19.0$ $s$ Montenbruck and Gill <sup>1</sup> <code>TAI_GPS</code> Constant offset from GPS to TAI time scale. $t_{tai} = t_{gps} + \\Delta_{TAI-GPS}$ $-19.0$ $s$ Montenbruck and Gill <sup>1</sup> <code>TT_TAI</code> Constant offset from TT to TAI time scale. $t_{tt} = t_{tai} + \\Delta_{TT-TAI}$ $32.184$ $s$ Montenbruck and Gill <sup>1</sup> <code>TAI_TT</code> Constant offset from TAI to TT time scale. $t_{tai} = t_{tt} + \\Delta_{TAI-TT}$ $-32.184$ $s$ Montenbruck and Gill <sup>1</sup> <code>GPS_TT</code> Constant offset from GPS to TT time scale. $t_{gps} = t_{tt} + \\Delta_{GPS-TT}$ $-51.184$ $s$ Montenbruck and Gill <sup>1</sup> <code>TT_GPS</code> Constant offset from TT to GPS time scale. $t_{tt} = t_{gps} + \\Delta_{TT-GPS}$ $51.184$ $s$ Montenbruck and Gill <sup>1</sup> <code>GPS_ZERO</code> Modified Julian Date of the start of the GPS time scale in the GPS time scale. This date is January 6, 1980 00:00:00 hours reckoned in the UTC time scale $44244.0$ Days Montenbruck and Gill <sup>1</sup>"},{"location":"reference/constants.html#physical-constants","title":"Physical Constants","text":"<p>Physical constants are fundamental physical constants or properties of  astronomical bodies. While these values are estimated they are considered to  be well known and do not change frequently.</p> Constant Description Value Units Source <code>C_LIGHT</code> Speed of light in vacuum. $299792458.0$ $\\frac{m}{s}$ Vallado <sup>2</sup> <code>AU</code> Astronominal Unit. TDB reference frame compatible value equal to the mean distance of the Earth from the Sun. $1.49597870700 \\times 10^{11}$ $m$ G\u00e9rard and Luzum <sup>3</sup> <code>R_EARTH</code> Earth's semi-major axis as defined by the Grace GGM05S gravity model. $.378136.3$ $m$ Ries et al. <sup>4</sup> <code>WGS84_A</code> Earth geoid model's semi-major axis as defined by the World Geodetic System 1984 edition. $6378137.0$ $m$ NIMA Technical Report <sup>5</sup> <code>WGS84_F</code> Earth geoid model's flattening as defined by the World Geodetic System 1984 edition. $\\frac{1.0}{298.257223563}$ Dimensionless NIMA Technical Report <sup>5</sup> <code>GM_EARTH</code> Gravitational Constant of the Earth. $3.986004415 \\times 10^{14}$ $\\frac{m^3}{s^2}$ Montenbruck and Gill <sup>1</sup> <code>ECC_EARTH</code> Earth geoid model's eccentricity. $8.1819190842622 \\times 10^{-2}$ Dimensionless NIMA Technical Report <sup>5</sup> <code>J2_EARTH</code> Earth's first zonal harmonic. Also known as Earth's oblateness. $0.0010826358191967$ Dimensionless Montenbruck and Gill <sup>1</sup> <code>OMEGA_EARTH</code> Earth's axial rotation rate. $7.292115146706979 \\times 10^{-5}$ $\\frac{rad}{s}$ Vallado <sup>2</sup> <code>GM_SUN</code> Gravitational constant of the Sun. $1.32712440041939400 \\times 10^{20}$ $\\frac{m^3}{s^2}$ Montenbruck and Gill <sup>1</sup> <code>R_SUN</code> Nominal photosphere radius of the Sun. $6.957 \\times 10^{8}$ $m$ Montenbruck and Gill <sup>1</sup> <code>P_SUN</code> Nominal solar radiation pressure at 1 AU. $4.560 \\times 10^{-6}$ $\\frac{N}{m^2}$ Montenbruck and Gill <sup>1</sup> <code>R_SUN</code> Equatorial radius of the Moon. $1.738 \\times 10^{6}$ $m$ Montenbruck and Gill <sup>1</sup> <code>GM_MOON</code> Gravitational constant of the Moon. $4.902800066 \\times 10^{12}$ $\\frac{m^3}{s^2}$ Montenbruck and Gill <sup>1</sup> <code>GM_MERCURY</code> Gravitational constant of the Mercury. $2.2031780 \\times 10^{13}$ $\\frac{m^3}{s^2}$ Montenbruck and Gill <sup>1</sup> <code>GM_VENUS</code> Gravitational constant of the Venus. $3.248585920 \\times 10^{12}$ $\\frac{m^3}{s^2}$ Montenbruck and Gill <sup>1</sup> <code>GM_MARS</code> Gravitational constant of the Mars. $4.282837521 \\times 10^{13}$ $\\frac{m^3}{s^2}$ Montenbruck and Gill <sup>1</sup> <code>GM_JUPITER</code> Gravitational constant of the Jupiter. $1.267127648 \\times 10^{17}$ $\\frac{m^3}{s^2}$ Montenbruck and Gill <sup>1</sup> <code>GM_SATURN</code> Gravitational constant of the Saturn. $3.79405852 \\times 10^{16}$ $\\frac{m^3}{s^2}$ Montenbruck and Gill <sup>1</sup> <code>GM_URANUS</code> Gravitational constant of the Uranus. $5.7945486 \\times 10^{15}$ $\\frac{m^3}{s^2}$ Montenbruck and Gill <sup>1</sup> <code>GM_NEPTUNE</code> Gravitational constant of the Neptune. $6.836527100580 \\times 10^{15}$ $\\frac{m^3}{s^2}$ Montenbruck and Gill <sup>1</sup> <code>GM_PLUTO</code> Gravitational constant of the Pluto. $9.770 \\times 10^{11}$ $\\frac{m^3}{s^2}$ Montenbruck and Gill <sup>1</sup> <ol> <li> <p>O. Montenbruck, and E. Gill, Satellite Orbits: Models, Methods and Applications, 2012\u00a0\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9</p> </li> <li> <p>D. Vallado, Fundamentals of Astrodynamics and Applications (4th Ed.), 2010\u00a0\u21a9\u21a9</p> </li> <li> <p>P. G\u00e9rard and B. Luzum, IERS Technical Note 36, 2010\u00a0\u21a9</p> </li> <li> <p>J. Ries, S. Bettadpur, R. Eanes, Z. Kang, U. Ko, C. McCullough, P. Nagel, N. Pie, S. Poole, T. Richter, H. Save, and B. Tapley, Development and Evaluation of the Global Gravity Model GGM05, 2016\u00a0\u21a9</p> </li> <li> <p>Department of Defense World Geodetic System 1984, Its Definition and Relationships With Local Geodetic Systems\u00a0\u21a9\u21a9\u21a9</p> </li> </ol>"}]}