"""Type stubs for brahe._brahe module."""

import numpy as np

# Classes and Enums
class Epoch:
    """Represents a moment in time with high precision."""

    ...

class AngleFormat:
    """Enum for angle format specification."""

    RADIANS: AngleFormat
    DEGREES: AngleFormat
    ...

class TimeSystem:
    """Enum for time system specification."""

    UTC: TimeSystem
    TAI: TimeSystem
    TT: TimeSystem
    GPS: TimeSystem
    UT1: TimeSystem
    ...

class FileEOPProvider:
    """Earth Orientation Parameters provider from file."""

    ...

class StaticEOPProvider:
    """Static Earth Orientation Parameters provider."""

    ...

def anomaly_eccentric_to_mean(
    anm_ecc: float, e: float, angle_format: AngleFormat
) -> float: ...
def anomaly_eccentric_to_true(
    anm_ecc: float, e: float, angle_format: AngleFormat
) -> float: ...
def anomaly_mean_to_eccentric(
    anm_mean: float, e: float, angle_format: AngleFormat
) -> float: ...
def anomaly_mean_to_true(
    anm_mean: float, e: float, angle_format: AngleFormat
) -> float: ...
def anomaly_true_to_eccentric(
    anm_true: float, e: float, angle_format: AngleFormat
) -> float: ...
def anomaly_true_to_mean(
    anm_true: float, e: float, angle_format: AngleFormat
) -> float: ...
def apoapsis_distance(a: float, e: float) -> float: ...
def apoapsis_velocity(a: float, e: float, gm: float) -> float: ...
def apogee_velocity(a: float, e: float) -> float: ...
def bias_precession_nutation(epc: Epoch) -> np.ndarray: ...
def calculate_tle_line_checksum(line: str) -> int: ...
def create_tle_lines(
    epoch: Epoch,
    inclination: float,
    raan: float,
    eccentricity: float,
    arg_perigee: float,
    mean_anomaly: float,
    mean_motion: float,
    norad_id: str,
    ephemeris_type: int,
    element_set_number: int,
    revolution_number: int,
    classification=None,
    intl_designator=None,
    first_derivative=None,
    second_derivative=None,
    bstar=None,
) -> tuple: ...
def datetime_to_jd(
    year: int,
    month: int,
    day: int,
    hour: int,
    minute: int,
    second: float,
    nanosecond: float,
) -> float: ...
def datetime_to_mjd(
    year: int,
    month: int,
    day: int,
    hour: int,
    minute: int,
    second: float,
    nanosecond: float,
) -> float: ...
def download_c04_eop_file(filepath: str) -> None: ...
def download_standard_eop_file(filepath: str) -> None: ...
def earth_rotation(epc: Epoch) -> np.ndarray: ...
def epoch_from_tle(line1: str) -> Epoch: ...
def get_global_dxdy(mjd: float) -> tuple[float, float]: ...
def get_global_eop(mjd: float) -> tuple[float, float, float, float, float, float]: ...
def get_global_eop_extrapolation() -> str: ...
def get_global_eop_initialization() -> bool: ...
def get_global_eop_interpolation() -> bool: ...
def get_global_eop_len() -> int: ...
def get_global_eop_mjd_last_dxdy() -> float: ...
def get_global_eop_mjd_last_lod() -> float: ...
def get_global_eop_mjd_max() -> float: ...
def get_global_eop_mjd_min() -> float: ...
def get_global_eop_type() -> str: ...
def get_global_lod(mjd: float) -> float: ...
def get_global_pm(mjd: float) -> tuple[float, float]: ...
def get_global_ut1_utc(mjd: float) -> float: ...
def jd_to_datetime(jd: float) -> tuple: ...
def keplerian_elements_from_tle(line1: str, line2: str) -> None: ...
def keplerian_elements_to_tle(
    epoch: Epoch, elements: np.ndarray, norad_id: str
) -> tuple: ...
def mean_motion(a: float, angle_format: AngleFormat) -> float: ...
def mean_motion_general(a: float, gm: float, angle_format: AngleFormat) -> float: ...
def mjd_to_datetime(mjd: float) -> tuple: ...
def norad_id_alpha5_to_numeric(alpha5_id: str) -> int: ...
def norad_id_numeric_to_alpha5(norad_id: int) -> str: ...
def orbital_period(a: float) -> float: ...
def orbital_period_general(a: float, gm: float) -> float: ...
def parse_norad_id(norad_str: str) -> int: ...
def periapsis_distance(a: float, e: float) -> float: ...
def periapsis_velocity(a: float, e: float, gm: float) -> float: ...
def perigee_velocity(a: float, e: float) -> float: ...
def polar_motion(epc: Epoch) -> np.ndarray: ...
def position_ecef_to_eci(epc: Epoch, x: np.ndarray) -> np.ndarray: ...
def position_ecef_to_geocentric(
    x_ecef: np.ndarray, angle_format: AngleFormat
) -> np.ndarray: ...
def position_ecef_to_geodetic(
    x_ecef: np.ndarray, angle_format: AngleFormat
) -> np.ndarray: ...
def position_eci_to_ecef(epc: Epoch, x: np.ndarray) -> np.ndarray: ...
def position_enz_to_azel(
    x_enz: np.ndarray, angle_format: AngleFormat
) -> np.ndarray: ...
def position_geocentric_to_ecef(
    x_geoc: np.ndarray, angle_format: AngleFormat
) -> np.ndarray: ...
def position_geodetic_to_ecef(
    x_geod: np.ndarray, angle_format: AngleFormat
) -> np.ndarray: ...
def position_sez_to_azel(
    x_sez: np.ndarray, angle_format: AngleFormat
) -> np.ndarray: ...
def relative_position_ecef_to_enz(
    location_ecef: np.ndarray, r_ecef: np.ndarray, conversion_type: str
) -> np.ndarray: ...
def relative_position_ecef_to_sez(
    location_ecef: np.ndarray, r_ecef: np.ndarray, conversion_type: str
) -> np.ndarray: ...
def relative_position_enz_to_ecef(
    location_ecef: np.ndarray, r_enz: np.ndarray, conversion_type: str
) -> np.ndarray: ...
def relative_position_sez_to_ecef(
    location_ecef: np.ndarray, x_sez: np.ndarray, conversion_type: str
) -> np.ndarray: ...
def rotation_ecef_to_eci(epc: Epoch) -> np.ndarray: ...
def rotation_eci_to_ecef(epc: Epoch) -> np.ndarray: ...
def rotation_ellipsoid_to_enz(
    x_ellipsoid: np.ndarray, angle_format: AngleFormat
) -> np.ndarray: ...
def rotation_ellipsoid_to_sez(
    x_ellipsoid: np.ndarray, angle_format: AngleFormat
) -> np.ndarray: ...
def rotation_enz_to_ellipsoid(
    x_ellipsoid: np.ndarray, angle_format: AngleFormat
) -> np.ndarray: ...
def rotation_sez_to_ellipsoid(
    x_ellipsoid: np.ndarray, angle_format: AngleFormat
) -> np.ndarray: ...
def semimajor_axis(n: float, angle_format: AngleFormat) -> float: ...
def semimajor_axis_from_orbital_period(period: float) -> float: ...
def semimajor_axis_from_orbital_period_general(period: float, gm: float) -> float: ...
def semimajor_axis_general(n: float, gm: float, angle_format: AngleFormat) -> float: ...
def set_global_eop_provider_from_file_provider(provider: FileEOPProvider) -> None: ...
def set_global_eop_provider_from_static_provider(
    provider: StaticEOPProvider,
) -> None: ...
def state_cartesian_to_osculating(
    x_cart: np.ndarray, angle_format: AngleFormat
) -> np.ndarray: ...
def state_ecef_to_eci(epc: Epoch, x_ecef: np.ndarray) -> np.ndarray: ...
def state_eci_to_ecef(epc: Epoch, x_eci: np.ndarray) -> np.ndarray: ...
def state_osculating_to_cartesian(
    x_oe: np.ndarray, angle_format: AngleFormat
) -> np.ndarray: ...
def sun_synchronous_inclination(
    a: float, e: float, angle_format: AngleFormat
) -> float: ...
def time_system_offset_for_datetime(
    year: int,
    month: int,
    day: int,
    hour: int,
    minute: int,
    second: float,
    nanosecond: float,
    time_system_src: TimeSystem,
    time_system_dst: TimeSystem,
) -> float: ...
def time_system_offset_for_jd(
    jd: float, time_system_src: TimeSystem, time_system_dst: TimeSystem
) -> float: ...
def time_system_offset_for_mjd(
    mjd: float, time_system_src: TimeSystem, time_system_dst: TimeSystem
) -> float: ...
def validate_tle_line(line: str) -> bool: ...
def validate_tle_lines(line1: str, line2: str) -> bool: ...

# Note: Class definitions would be added here
# For now, classes are not fully typed in this stub
