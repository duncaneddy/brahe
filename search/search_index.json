{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Brahe","text":"<p> Brahe - easy-to-learn, high-performance, and quick-to-deploy </p> <p> </p> <p>Pure-Python Brahe Deprecation Notice</p> <p>The older pure-Python implementaiton of brahe is currently being deprecated in favor of an improved Rust-based implementation. There will be breaking changes during this period that include breaking changes. You can read more about this change in the deprecation notice.</p>"},{"location":"index.html#brahe","title":"Brahe","text":"<p>All software is wrong, but some is useful.</p> <p>Brahe is a modern satellite dynamics library for research and engineering applications. It is designed to be easy-to-learn, quick-to-deploy, and easy to build on. The north-star of the development is enabling users to solve meaningful problems and answer questions quickly and correctly.</p> <p>The Brahe permissively licensed and distributed under an MIT License to encourage adoption and enable the broader community to build on the work.</p> <p>If you do find it useful, please consider starring the repository on GitHub to help increase its visibility. If you're using Brahe for school, research, a commercial endeavour, or flying a mission. I'd love to know about it! You can find my contact information on my personal website,  or open an issue on the GitHub repository.</p>"},{"location":"index.html#quick-start","title":"Quick Start","text":"<p>To install the latest release of brahe, simply run:</p> <pre><code>pip install brahe\n</code></pre> <p>You can then import the package in your Python code with:</p> <pre><code>import brahe as bh\n</code></pre> <p>And do something fun like calculate the orbital-period of a satellite in low Earth orbit:</p> <pre><code>import brahe as bh\n\n# Define the semi-major axis of a low Earth orbit (in meters)\na = bh.constants.EARTH_RADIUS + 400e3  # 400 km altitude\n\n# Calculate the orbital period using Kepler's third law\nT = bh.orbital_period(a)\n\nprint(f\"Orbital Period: {T / 60:.2f} minutes\")\n</code></pre>"},{"location":"index.html#going-further","title":"Going Further","text":"<p>You can find the package documentation here.</p> <p>The documentation contains learning guides for the major concepts, how-to-examples for common tasks, and a full API reference for both the Python and Rust libraries.</p>"},{"location":"index.html#support-and-acknowledgement","title":"Support and Acknowledgement","text":"<p>Brahe is currently being developed primarily for my own enjoyment and because I find having these tools helpful in professional and hobby work. I plan to continue developing it for the time being regardless of greater adoption as time permitting.</p> <p>That being said, it's incredibly encouraging and useful to know if the software is being adopted or found useful in wider practice.</p>"},{"location":"contributing.html","title":"Contributing","text":""},{"location":"contributing.html#development-workflow","title":"Development Workflow","text":"<p>For all development we recommend using uv to manage your environment. The guidelines for contributing, developing, and extending brahe assume you are using uv.</p>"},{"location":"contributing.html#setting-up-your-environment","title":"Setting up your environment","text":"<p>If you need to setup the development environment, including installing the necessary development dependencies.</p> <p>First, you need to install Rust from rustup.rs.</p> <p>Then you can install the nightly toolchain with:</p> <pre><code>rustup toolchain install nightly\nrustup default nightly\n</code></pre> <p>After this you can now setup your python environment with:</p> <pre><code>uv sync --dev\n</code></pre> <p>Finally, you can install the pre-commit hooks with:</p> <pre><code>uv run pre-commit install\n</code></pre>"},{"location":"contributing.html#testing","title":"Testing","text":"<p>The package includes both Rust and Python tests.</p> <p>To execute the Rust test suite run the following command:</p> <pre><code>cargo test\n</code></pre> <p>To execute the python test suite first install the package in editable mode with development dependencies:</p> <pre><code>uv pip install -e .\n</code></pre> <p>Then run the test suite with:</p> <pre><code>uv run pytest\n</code></pre>"},{"location":"contributing.html#rust-standards-and-guidelines","title":"Rust Standards and Guidelines","text":""},{"location":"contributing.html#rust-testing-conventions","title":"Rust Testing Conventions","text":"<p>New functions implemented in rust are expected to have unit tests and documentation tests. Unit tests should cover all edge cases and typical use cases for the function. Documentation tests should provide examples of how to use the function.</p> <p>Unit tests should be placed in the same file as the function they are testing, in a module named <code>tests</code>. The names of tests should follow the general convention of <code>test_&lt;struct&gt;_&lt;trait&gt;_&lt;method&gt;_&lt;case&gt;</code> or <code>test_&lt;function&gt;_&lt;case&gt;</code>.</p>"},{"location":"contributing.html#rust-docstring-template","title":"Rust Docstring Template","text":"<p>New functions implemented in rust are expected to use the following docstring to standardize information on functions to enable users to more easily navigate and learn the library.</p> <pre><code>{{ Function Description }}\n\n## Arguments\n\n* `argument_name`: {{ Arugment description}}. Units: {{ Optional, Units as (value). e.g. (rad) or (deg)}}\n\n## Returns\n\n* `value_name`: {{ Value description}}. Units: {{ Optional, Units as (value). e.g. (rad) or (deg)}}\n\n## Examples\n\\`\\`\\`\n{{ Implement shor function in language }}\n\\`\\`\\`\n\n## References:\n1. {{ author, *title/journal*, pp. page_number, eq. equation_number, year}}\n2. O. Montenbruck, and E. Gill, *Satellite Orbits: Models, Methods and Applications*, pp. 24, eq. 2.43 &amp; 2.44, 2012.\n</code></pre>"},{"location":"contributing.html#python-standards-and-guidelines","title":"Python Standards and Guidelines","text":""},{"location":"contributing.html#python-testing-conventions","title":"Python Testing Conventions","text":"<p>Python tests should be placed in the <code>tests</code> directory. The test structure and names should mirror the structure of the <code>brahe</code> package. For example, tests for <code>brahe.orbits.keplerian</code> should be placed in <code>tests/orbits/test_keplerian.py</code>.</p> <p>All Python tests should be exact mirrors of the Rust tests, ensuring that both implementations are equivalent and consistent. There are a few exceptions to this rule, such as tests that check for Python-specific functionality or behavior, or capabilities that are not possible to reproduce in Python due to language limitations.</p>"},{"location":"installation.html","title":"Installation","text":""},{"location":"installation.html#rust","title":"Rust","text":""},{"location":"installation.html#python","title":"Python","text":""},{"location":"about/index.html","title":"About","text":"<p>Brahe is a modern satellite dynamics library for research and engineering applications. It is designed to be easy-to-learn, high-performance, and quick-to-deploy. The north-star of the development is enabling users to solve meaningful problems and answer questions quickly, easily, and correctly.</p> <p>The key features of the library are:</p> <ul> <li>Intuitive API: API designed to be easily composable, making it easy to   solve complex problems correctly by building on core functionality.</li> <li>Easy-to-Learn: Designed to be easy to use and learn. The objective is   to provide clear documentation and visibility into what the software is doing   so that users don't need to spend time reverse engineering internal routines   and more time solving their own problems.</li> <li>High-Performance: Brahe provides a Python 3.6+ wrapper that is   auto-generated from a core Rust library. This provides fast core implementation,   while allowing users to take advantage of Python's rich scientific ecosystem   if they so choose.</li> <li>Answer Questions Quickly: Brahe is designed to make it easy to code up   solutions to meaningful problems. High-fieldity, high-performance APIs are not   the end-objective, but helping users solve their problems.</li> </ul> <p>Brahe gets its name from the combination of Rust and astrodynamics (Rust + astrodynamics = Brahe). The library specifically focuses on satellite astrodynamics and space mission analysis. While the underlying concepts have been studied and known since Kepler wrote down his three laws, there are few modern software libraries that make these concepts easily accessible. While extremely well tested, other astrodynamics and mission analysis software can have an extremely steep learning curve, making it difficult to quickly run simple analysis that is known to be correct.</p> <p>Because of this, students, researchers, and engineers frequently end up reimplementing common astrodynamics and mission analysis tools with unfortunately frequent regularity. While  reimplementation of common code can be a good learning mechanisms, in most cases it is both error-prone and costs time better spent on other endeavours. This project seeks to providing an easy-to-use, well-tested library, to enable everyone to more easily, and quickly perform astrodynamics and space mission analysis without sacrificing performance or correctness. The software built in Rust for performance with bindings to Python for ease of use.</p> <p>The implementation approach is opinionated, the objective is to provide an easy-to-use and accurate astrodynamics library to enable users to quickly and correctly solve most common problem types. it is not practical to try to implement every aerodynamics model and function utilized in practice or historically. Since Brahe is open source, if a specific function is not present, or a different implementation is required, users can modify the code to address their specific use case. This means that Brahe, while we want to continue expanding the capabilities of the module over time, the immediate goal is to provide a well-tested, flexible, composable API to quickly address modern problems in astrodynamics.</p> <p>One example of this in practice is that the built-in Earth reference frame transformation utilizes the IAU 2006/2000A precession-nutation model, CIO-based transformation. Even through there are multiple ways to construct this transformation, Brahe only implements one. Another example, is that the geodetic and geocentric transformations use the latest NIMA technical report definitions for Earth's radius and flatness. If a desired model isn't implemented users are free to extend the software to address and functionality or modeling gaps that exist to address their specific application.</p>"},{"location":"about/design_decisions.html","title":"Design Decisions","text":"<p>This page documents significant design decisions of the library.</p>"},{"location":"about/design_decisions.html#default-64-bit-floating-point-functions","title":"Default 64-bit Floating Point Functions","text":"<p>There is a decision to be made as to whether to support both 32-bit and 64-bit operations for all standard functions that could be used with either type. However, this results in duplicating a large amount of code as Rust does not support overloading primitive types. While some space missions may use lower-precision processors that do not support 64-bit floating point operations, the majority of modern computers and processors do support 64-bit floating point operations. Furthermore, the primary focus of this library is for us in terrestrial applications, and analysis, or space-processors that do support 64-bit floating point operations.</p> <p>Therefore, the decision is to only support 64-bit floating point operations for the time being.</p>"},{"location":"about/design_decisions.html#inline-pyo3-annotations-vs-written-wrappers","title":"Inline PyO3 Annotations vs Written Wrappers","text":"<p>There is a decision to use PyO3 macros to generate Python bindings or  to write them manually. Currently, the decision is to write them manually to have more control over the generated code and be able to more easily navigate issues related to type conversions that can arise. As a secondary benefit separate python-formatted docstrings can be written for the new functions.</p> <p>PyO3 macros would ultimately be preferable to reduce duplication of code, the  amount of boilerplate, and to make the code more maintainable. However, at the current time the complexity and difficulty to get them working is not worth the effort. This decision may be revisited in the future, and any change  proposals and pull requests to use PyO3 macros are welcome.</p>"},{"location":"about/license.html","title":"License","text":"<p>Brahe is released under a commercially-permissive MIT License that can be found here.</p> <p>The reason is so that individuals, studens, and companies can stop reinventing the wheel to get access to useful software that solves common problems without paying prohibitive amounts of money.</p>"},{"location":"about/python_deprecation.html","title":"Pure-Python Brahe Deprecation Notice","text":"<p>The older pure-Python version of brahe is currently being deprecated in favor of a mixed Rust-Python implementation, along with improved documentation. That means that the development on the <code>master</code> branch has been frozen and will no longer be developed against. Moving forward the <code>main</code> branch will be the primary branch for the project.</p> <p>There will be point commits (less than <code>1.0.0</code>) during this period that include breaking changes.</p> <p>Furthermore, initially the features of the new implementation will not be at partity with the old python implementation, so users should pin their requirements file to use the latest commit of the master branch:</p> <pre><code>brahe @ git+https://github.com/duncaneddy/brahe@master\n</code></pre> <p>To install and use the latest master branch via pip</p> <pre><code>pip install git+https://github.com/duncaneddy/brahe.git@master\n</code></pre> <p>The old master branch can be found here.</p>"},{"location":"library_api/index.html","title":"Library API","text":"<p>This section provides detailed information about all the classes, functions, and modules available in the ASTRA-RL toolbox. Each entry includes a description of its purpose, parameters, and usage examples.</p> <p>This documentation is generated automatically from the codebase using docstrings and comments, ensuring that it stays up-to-date with the latest changes.</p>"},{"location":"library_api/index.html#brahe","title":"brahe","text":"<p>Brahe - Satellite Dynamics and Astrodynamics Library</p> <p>A high-performance library for orbital mechanics, time systems, coordinate transformations, and attitude representations. Brahe provides both Rust and Python interfaces for satellite dynamics computations.</p> <p>The library is organized into submodules that mirror the Rust core structure: - time: Time systems, epochs, and conversions - orbits: Orbital mechanics, propagators, and TLE handling - coordinates: Coordinate system transformations - frames: Reference frame transformations (ECI/ECEF) - eop: Earth Orientation Parameters - attitude: Attitude representations (quaternions, Euler angles, etc.) - trajectories: Trajectory containers and interpolation</p> <p>All functionality is re-exported at the top level for convenience, so you can use either:     from brahe import Epoch     from brahe.time import Epoch</p>"},{"location":"library_api/index.html#brahe.AS2RAD","title":"AS2RAD  <code>module-attribute</code>","text":"<pre><code>AS2RAD = 4.84813681109536e-06\n</code></pre> <p>Convert a string or number to a floating-point number, if possible.</p>"},{"location":"library_api/index.html#brahe.AU","title":"AU  <code>module-attribute</code>","text":"<pre><code>AU = 149597870700.0\n</code></pre> <p>Convert a string or number to a floating-point number, if possible.</p>"},{"location":"library_api/index.html#brahe.C_LIGHT","title":"C_LIGHT  <code>module-attribute</code>","text":"<pre><code>C_LIGHT = 299792458.0\n</code></pre> <p>Convert a string or number to a floating-point number, if possible.</p>"},{"location":"library_api/index.html#brahe.DEG2RAD","title":"DEG2RAD  <code>module-attribute</code>","text":"<pre><code>DEG2RAD = 0.017453292519943295\n</code></pre> <p>Convert a string or number to a floating-point number, if possible.</p>"},{"location":"library_api/index.html#brahe.ECC_EARTH","title":"ECC_EARTH  <code>module-attribute</code>","text":"<pre><code>ECC_EARTH = 0.081819190842622\n</code></pre> <p>Convert a string or number to a floating-point number, if possible.</p>"},{"location":"library_api/index.html#brahe.GM_EARTH","title":"GM_EARTH  <code>module-attribute</code>","text":"<pre><code>GM_EARTH = 398600441500000.0\n</code></pre> <p>Convert a string or number to a floating-point number, if possible.</p>"},{"location":"library_api/index.html#brahe.GM_JUPITER","title":"GM_JUPITER  <code>module-attribute</code>","text":"<pre><code>GM_JUPITER = 1.267127648e+17\n</code></pre> <p>Convert a string or number to a floating-point number, if possible.</p>"},{"location":"library_api/index.html#brahe.GM_MARS","title":"GM_MARS  <code>module-attribute</code>","text":"<pre><code>GM_MARS = 42828375210000.0\n</code></pre> <p>Convert a string or number to a floating-point number, if possible.</p>"},{"location":"library_api/index.html#brahe.GM_MERCURY","title":"GM_MERCURY  <code>module-attribute</code>","text":"<pre><code>GM_MERCURY = 22031780000000.0\n</code></pre> <p>Convert a string or number to a floating-point number, if possible.</p>"},{"location":"library_api/index.html#brahe.GM_MOON","title":"GM_MOON  <code>module-attribute</code>","text":"<pre><code>GM_MOON = 4902800066000.0\n</code></pre> <p>Convert a string or number to a floating-point number, if possible.</p>"},{"location":"library_api/index.html#brahe.GM_NEPTUNE","title":"GM_NEPTUNE  <code>module-attribute</code>","text":"<pre><code>GM_NEPTUNE = 6836527100580000.0\n</code></pre> <p>Convert a string or number to a floating-point number, if possible.</p>"},{"location":"library_api/index.html#brahe.GM_PLUTO","title":"GM_PLUTO  <code>module-attribute</code>","text":"<pre><code>GM_PLUTO = 977000000000.0\n</code></pre> <p>Convert a string or number to a floating-point number, if possible.</p>"},{"location":"library_api/index.html#brahe.GM_SATURN","title":"GM_SATURN  <code>module-attribute</code>","text":"<pre><code>GM_SATURN = 3.79405852e+16\n</code></pre> <p>Convert a string or number to a floating-point number, if possible.</p>"},{"location":"library_api/index.html#brahe.GM_SUN","title":"GM_SUN  <code>module-attribute</code>","text":"<pre><code>GM_SUN = 1.327124400419394e+20\n</code></pre> <p>Convert a string or number to a floating-point number, if possible.</p>"},{"location":"library_api/index.html#brahe.GM_URANUS","title":"GM_URANUS  <code>module-attribute</code>","text":"<pre><code>GM_URANUS = 5794548600000000.0\n</code></pre> <p>Convert a string or number to a floating-point number, if possible.</p>"},{"location":"library_api/index.html#brahe.GM_VENUS","title":"GM_VENUS  <code>module-attribute</code>","text":"<pre><code>GM_VENUS = 324858592000000.0\n</code></pre> <p>Convert a string or number to a floating-point number, if possible.</p>"},{"location":"library_api/index.html#brahe.GPS","title":"GPS  <code>module-attribute</code>","text":"<pre><code>GPS = TimeSystem.GPS\n</code></pre> <p>Enumeration of supported time systems.</p> <p>Time systems define different conventions for measuring and representing time. Each system has specific uses in astrodynamics and timekeeping applications.</p>"},{"location":"library_api/index.html#brahe.GPS_TAI","title":"GPS_TAI  <code>module-attribute</code>","text":"<pre><code>GPS_TAI = -19.0\n</code></pre> <p>Convert a string or number to a floating-point number, if possible.</p>"},{"location":"library_api/index.html#brahe.GPS_TT","title":"GPS_TT  <code>module-attribute</code>","text":"<pre><code>GPS_TT = -51.184\n</code></pre> <p>Convert a string or number to a floating-point number, if possible.</p>"},{"location":"library_api/index.html#brahe.GPS_ZERO","title":"GPS_ZERO  <code>module-attribute</code>","text":"<pre><code>GPS_ZERO = 44244.0\n</code></pre> <p>Convert a string or number to a floating-point number, if possible.</p>"},{"location":"library_api/index.html#brahe.J2_EARTH","title":"J2_EARTH  <code>module-attribute</code>","text":"<pre><code>J2_EARTH = 0.0010826358191967\n</code></pre> <p>Convert a string or number to a floating-point number, if possible.</p>"},{"location":"library_api/index.html#brahe.MJD2000","title":"MJD2000  <code>module-attribute</code>","text":"<pre><code>MJD2000 = 51544.5\n</code></pre> <p>Convert a string or number to a floating-point number, if possible.</p>"},{"location":"library_api/index.html#brahe.MJD_ZERO","title":"MJD_ZERO  <code>module-attribute</code>","text":"<pre><code>MJD_ZERO = 2400000.5\n</code></pre> <p>Convert a string or number to a floating-point number, if possible.</p>"},{"location":"library_api/index.html#brahe.OMEGA_EARTH","title":"OMEGA_EARTH  <code>module-attribute</code>","text":"<pre><code>OMEGA_EARTH = 7.292115146706979e-05\n</code></pre> <p>Convert a string or number to a floating-point number, if possible.</p>"},{"location":"library_api/index.html#brahe.P_SUN","title":"P_SUN  <code>module-attribute</code>","text":"<pre><code>P_SUN = 4.56e-06\n</code></pre> <p>Convert a string or number to a floating-point number, if possible.</p>"},{"location":"library_api/index.html#brahe.RAD2AS","title":"RAD2AS  <code>module-attribute</code>","text":"<pre><code>RAD2AS = 206264.80624709636\n</code></pre> <p>Convert a string or number to a floating-point number, if possible.</p>"},{"location":"library_api/index.html#brahe.RAD2DEG","title":"RAD2DEG  <code>module-attribute</code>","text":"<pre><code>RAD2DEG = 57.29577951308232\n</code></pre> <p>Convert a string or number to a floating-point number, if possible.</p>"},{"location":"library_api/index.html#brahe.R_EARTH","title":"R_EARTH  <code>module-attribute</code>","text":"<pre><code>R_EARTH = 6378136.3\n</code></pre> <p>Convert a string or number to a floating-point number, if possible.</p>"},{"location":"library_api/index.html#brahe.R_MOON","title":"R_MOON  <code>module-attribute</code>","text":"<pre><code>R_MOON = 1738000.0\n</code></pre> <p>Convert a string or number to a floating-point number, if possible.</p>"},{"location":"library_api/index.html#brahe.R_SUN","title":"R_SUN  <code>module-attribute</code>","text":"<pre><code>R_SUN = 695700000.0\n</code></pre> <p>Convert a string or number to a floating-point number, if possible.</p>"},{"location":"library_api/index.html#brahe.TAI","title":"TAI  <code>module-attribute</code>","text":"<pre><code>TAI = TimeSystem.TAI\n</code></pre> <p>Enumeration of supported time systems.</p> <p>Time systems define different conventions for measuring and representing time. Each system has specific uses in astrodynamics and timekeeping applications.</p>"},{"location":"library_api/index.html#brahe.TAI_GPS","title":"TAI_GPS  <code>module-attribute</code>","text":"<pre><code>TAI_GPS = 19.0\n</code></pre> <p>Convert a string or number to a floating-point number, if possible.</p>"},{"location":"library_api/index.html#brahe.TAI_TT","title":"TAI_TT  <code>module-attribute</code>","text":"<pre><code>TAI_TT = -32.184\n</code></pre> <p>Convert a string or number to a floating-point number, if possible.</p>"},{"location":"library_api/index.html#brahe.TT","title":"TT  <code>module-attribute</code>","text":"<pre><code>TT = TimeSystem.TT\n</code></pre> <p>Enumeration of supported time systems.</p> <p>Time systems define different conventions for measuring and representing time. Each system has specific uses in astrodynamics and timekeeping applications.</p>"},{"location":"library_api/index.html#brahe.TT_GPS","title":"TT_GPS  <code>module-attribute</code>","text":"<pre><code>TT_GPS = 51.184\n</code></pre> <p>Convert a string or number to a floating-point number, if possible.</p>"},{"location":"library_api/index.html#brahe.TT_TAI","title":"TT_TAI  <code>module-attribute</code>","text":"<pre><code>TT_TAI = 32.184\n</code></pre> <p>Convert a string or number to a floating-point number, if possible.</p>"},{"location":"library_api/index.html#brahe.UT1","title":"UT1  <code>module-attribute</code>","text":"<pre><code>UT1 = TimeSystem.UT1\n</code></pre> <p>Enumeration of supported time systems.</p> <p>Time systems define different conventions for measuring and representing time. Each system has specific uses in astrodynamics and timekeeping applications.</p>"},{"location":"library_api/index.html#brahe.UTC","title":"UTC  <code>module-attribute</code>","text":"<pre><code>UTC = TimeSystem.UTC\n</code></pre> <p>Enumeration of supported time systems.</p> <p>Time systems define different conventions for measuring and representing time. Each system has specific uses in astrodynamics and timekeeping applications.</p>"},{"location":"library_api/index.html#brahe.WGS84_A","title":"WGS84_A  <code>module-attribute</code>","text":"<pre><code>WGS84_A = 6378137.0\n</code></pre> <p>Convert a string or number to a floating-point number, if possible.</p>"},{"location":"library_api/index.html#brahe.WGS84_F","title":"WGS84_F  <code>module-attribute</code>","text":"<pre><code>WGS84_F = 0.0033528106647474805\n</code></pre> <p>Convert a string or number to a floating-point number, if possible.</p>"},{"location":"library_api/index.html#brahe.anomaly_eccentric_to_mean","title":"anomaly_eccentric_to_mean  <code>builtin</code>","text":"<pre><code>anomaly_eccentric_to_mean(anm_ecc, e, angle_format)\n</code></pre> <p>Converts eccentric anomaly into mean anomaly.</p> <p>Parameters:</p> Name Type Description Default <code>anm_ecc</code> <code>float</code> <p>Eccentric anomaly in radians or degrees.</p> required <code>e</code> <code>float</code> <p>The eccentricity of the astronomical object's orbit (dimensionless).</p> required <code>angle_format</code> <code>AngleFormat</code> <p>Interprets input and returns output in AngleFormat.DEGREES or AngleFormat.RADIANS.</p> required <p>Returns:</p> Name Type Description <code>float</code> <p>Mean anomaly in radians or degrees.</p>"},{"location":"library_api/index.html#brahe.anomaly_eccentric_to_true","title":"anomaly_eccentric_to_true  <code>builtin</code>","text":"<pre><code>anomaly_eccentric_to_true(anm_ecc, e, angle_format)\n</code></pre> <p>Converts eccentric anomaly into true anomaly.</p> <p>Parameters:</p> Name Type Description Default <code>anm_ecc</code> <code>float</code> <p>Eccentric anomaly in radians or degrees.</p> required <code>e</code> <code>float</code> <p>The eccentricity of the astronomical object's orbit (dimensionless).</p> required <code>angle_format</code> <code>AngleFormat</code> <p>Interprets input and returns output in AngleFormat.DEGREES or AngleFormat.RADIANS.</p> required <p>Returns:</p> Name Type Description <code>float</code> <p>True anomaly in radians or degrees.</p>"},{"location":"library_api/index.html#brahe.anomaly_mean_to_eccentric","title":"anomaly_mean_to_eccentric  <code>builtin</code>","text":"<pre><code>anomaly_mean_to_eccentric(anm_mean, e, angle_format)\n</code></pre> <p>Converts mean anomaly into eccentric anomaly.</p> <p>Parameters:</p> Name Type Description Default <code>anm_mean</code> <code>float</code> <p>Mean anomaly in radians or degrees.</p> required <code>e</code> <code>float</code> <p>The eccentricity of the astronomical object's orbit (dimensionless).</p> required <code>angle_format</code> <code>AngleFormat</code> <p>Interprets input and returns output in AngleFormat.DEGREES or AngleFormat.RADIANS.</p> required <p>Returns:</p> Name Type Description <code>float</code> <p>Eccentric anomaly in radians or degrees.</p>"},{"location":"library_api/index.html#brahe.anomaly_mean_to_true","title":"anomaly_mean_to_true  <code>builtin</code>","text":"<pre><code>anomaly_mean_to_true(anm_mean, e, angle_format)\n</code></pre> <p>Converts mean anomaly into true anomaly.</p> <p>Parameters:</p> Name Type Description Default <code>anm_mean</code> <code>float</code> <p>Mean anomaly in radians or degrees.</p> required <code>e</code> <code>float</code> <p>The eccentricity of the astronomical object's orbit (dimensionless).</p> required <code>angle_format</code> <code>AngleFormat</code> <p>Interprets input and returns output in AngleFormat.DEGREES or AngleFormat.RADIANS.</p> required <p>Returns:</p> Name Type Description <code>float</code> <p>True anomaly in radians or degrees.</p>"},{"location":"library_api/index.html#brahe.anomaly_true_to_eccentric","title":"anomaly_true_to_eccentric  <code>builtin</code>","text":"<pre><code>anomaly_true_to_eccentric(anm_true, e, angle_format)\n</code></pre> <p>Converts true anomaly into eccentric anomaly.</p> <p>Parameters:</p> Name Type Description Default <code>anm_true</code> <code>float</code> <p>True anomaly in radians or degrees.</p> required <code>e</code> <code>float</code> <p>The eccentricity of the astronomical object's orbit (dimensionless).</p> required <code>angle_format</code> <code>AngleFormat</code> <p>Interprets input and returns output in AngleFormat.DEGREES or AngleFormat.RADIANS.</p> required <p>Returns:</p> Name Type Description <code>float</code> <p>Eccentric anomaly in radians or degrees.</p>"},{"location":"library_api/index.html#brahe.anomaly_true_to_mean","title":"anomaly_true_to_mean  <code>builtin</code>","text":"<pre><code>anomaly_true_to_mean(anm_true, e, angle_format)\n</code></pre> <p>Converts true anomaly into mean anomaly.</p> <p>Parameters:</p> Name Type Description Default <code>anm_true</code> <code>float</code> <p>True anomaly in radians or degrees.</p> required <code>e</code> <code>float</code> <p>The eccentricity of the astronomical object's orbit (dimensionless).</p> required <code>angle_format</code> <code>AngleFormat</code> <p>Interprets input and returns output in AngleFormat.DEGREES or AngleFormat.RADIANS.</p> required <p>Returns:</p> Name Type Description <code>float</code> <p>Mean anomaly in radians or degrees.</p>"},{"location":"library_api/index.html#brahe.apoapsis_distance","title":"apoapsis_distance  <code>builtin</code>","text":"<pre><code>apoapsis_distance(a, e)\n</code></pre> <p>Calculate the distance of an object at its apoapsis.</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>float</code> <p>The semi-major axis of the astronomical object in meters.</p> required <code>e</code> <code>float</code> <p>The eccentricity of the astronomical object's orbit (dimensionless).</p> required <p>Returns:</p> Name Type Description <code>float</code> <p>The distance of the object at apoapsis in meters.</p>"},{"location":"library_api/index.html#brahe.apoapsis_velocity","title":"apoapsis_velocity  <code>builtin</code>","text":"<pre><code>apoapsis_velocity(a, e, gm)\n</code></pre> <p>Computes the apoapsis velocity of an astronomical object around a general body.</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>float</code> <p>The semi-major axis of the astronomical object in meters.</p> required <code>e</code> <code>float</code> <p>The eccentricity of the astronomical object's orbit (dimensionless).</p> required <code>gm</code> <code>float</code> <p>The standard gravitational parameter of primary body in m\u00b3/s\u00b2.</p> required <p>Returns:</p> Name Type Description <code>float</code> <p>The magnitude of velocity of the object at apoapsis in m/s.</p>"},{"location":"library_api/index.html#brahe.apogee_velocity","title":"apogee_velocity  <code>builtin</code>","text":"<pre><code>apogee_velocity(a, e)\n</code></pre> <p>Computes the apogee velocity of an astronomical object around Earth.</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>float</code> <p>The semi-major axis of the astronomical object in meters.</p> required <code>e</code> <code>float</code> <p>The eccentricity of the astronomical object's orbit (dimensionless).</p> required <p>Returns:</p> Name Type Description <code>float</code> <p>The magnitude of velocity of the object at apogee in m/s.</p>"},{"location":"library_api/index.html#brahe.bias_precession_nutation","title":"bias_precession_nutation  <code>builtin</code>","text":"<pre><code>bias_precession_nutation(epc)\n</code></pre> <p>Computes the Bias-Precession-Nutation matrix transforming the GCRS to the CIRS intermediate reference frame. This transformation corrects for the bias, precession, and nutation of Celestial Intermediate Origin (CIO) with respect to inertial space.</p> <p>This formulation computes the Bias-Precession-Nutation correction matrix according using a CIO based model using using the IAU 2006 precession and IAU 2000A nutation models.</p> <p>The function will utilize the global Earth orientation and loaded data to apply corrections to the Celestial Intermediate Pole (CIP) derived from empirical observations.</p> <p>Parameters:</p> Name Type Description Default <code>epc</code> <code>Epoch</code> <p>Epoch instant for computation of transformation matrix</p> required <p>Returns:</p> Type Description <p>numpy.ndarray: 3x3 rotation matrix transforming GCRS -&gt; CIRS</p> References <p>IAU SOFA Tools For Earth Attitude, Example 5.5 http://www.iausofa.org/2021_0512_C/sofa/sofa_pn_c.pdf Software Version 18, 2021-04-18</p>"},{"location":"library_api/index.html#brahe.calculate_tle_line_checksum","title":"calculate_tle_line_checksum  <code>builtin</code>","text":"<pre><code>calculate_tle_line_checksum(line)\n</code></pre> <p>Calculate TLE line checksum.</p> <p>Parameters:</p> Name Type Description Default <code>line</code> <code>str</code> <p>TLE line.</p> required <p>Returns:</p> Name Type Description <code>int</code> <p>Checksum value.</p>"},{"location":"library_api/index.html#brahe.create_tle_lines","title":"create_tle_lines  <code>builtin</code>","text":"<pre><code>create_tle_lines(epoch, inclination, raan, eccentricity, arg_perigee, mean_anomaly, mean_motion, norad_id, ephemeris_type, element_set_number, revolution_number, classification=None, intl_designator=None, first_derivative=None, second_derivative=None, bstar=None)\n</code></pre> <p>Create complete TLE lines from all parameters.</p> <p>Creates Two-Line Element (TLE) lines from complete set of orbital and administrative parameters. Provides full control over all TLE fields including derivatives and drag terms.</p> <p>Parameters:</p> Name Type Description Default <code>epoch</code> <code>Epoch</code> <p>Epoch of the elements.</p> required <code>inclination</code> <code>float</code> <p>Inclination in degrees.</p> required <code>raan</code> <code>float</code> <p>Right ascension of ascending node in degrees.</p> required <code>eccentricity</code> <code>float</code> <p>Eccentricity (dimensionless).</p> required <code>arg_perigee</code> <code>float</code> <p>Argument of periapsis in degrees.</p> required <code>mean_anomaly</code> <code>float</code> <p>Mean anomaly in degrees.</p> required <code>mean_motion</code> <code>float</code> <p>Mean motion in revolutions per day.</p> required <code>norad_id</code> <code>str</code> <p>NORAD catalog number (supports numeric and Alpha-5 format).</p> required <code>ephemeris_type</code> <code>int</code> <p>Ephemeris type (0-9).</p> required <code>element_set_number</code> <code>int</code> <p>Element set number.</p> required <code>revolution_number</code> <code>int</code> <p>Revolution number at epoch.</p> required <code>classification</code> <code>str</code> <p>Security classification. Defaults to ' '.</p> <code>None</code> <code>intl_designator</code> <code>str</code> <p>International designator. Defaults to ''.</p> <code>None</code> <code>first_derivative</code> <code>float</code> <p>First derivative of mean motion. Defaults to 0.0.</p> <code>None</code> <code>second_derivative</code> <code>float</code> <p>Second derivative of mean motion. Defaults to 0.0.</p> <code>None</code> <code>bstar</code> <code>float</code> <p>BSTAR drag term. Defaults to 0.0.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>tuple</code> <p>A tuple containing (line1, line2) - the two TLE lines as strings.</p>"},{"location":"library_api/index.html#brahe.datetime_to_jd","title":"datetime_to_jd  <code>builtin</code>","text":"<pre><code>datetime_to_jd(year, month, day, hour, minute, second, nanosecond)\n</code></pre> <p>Convert a Gregorian calendar date to the equivalent Julian Date.</p> <p>Note: Due to the ambiguity of the nature of leap second insertion, this method should not be used if a specific behavior for leap second insertion is expected. This method treats leap seconds as if they don't exist.</p> <p>Parameters:</p> Name Type Description Default <code>year</code> <code>int</code> <p>Year</p> required <code>month</code> <code>int</code> <p>Month (1-12)</p> required <code>day</code> <code>int</code> <p>Day of month (1-31)</p> required <code>hour</code> <code>int</code> <p>Hour (0-23)</p> required <code>minute</code> <code>int</code> <p>Minute (0-59)</p> required <code>second</code> <code>float</code> <p>Second with fractional part</p> required <code>nanosecond</code> <code>float</code> <p>Nanosecond component</p> required <p>Returns:</p> Name Type Description <code>float</code> <p>Julian date of epoch</p>"},{"location":"library_api/index.html#brahe.datetime_to_mjd","title":"datetime_to_mjd  <code>builtin</code>","text":"<pre><code>datetime_to_mjd(year, month, day, hour, minute, second, nanosecond)\n</code></pre> <p>Convert a Gregorian calendar date to the equivalent Modified Julian Date.</p> <p>Note: Due to the ambiguity of the nature of leap second insertion, this method should not be used if a specific behavior for leap second insertion is expected. This method treats leap seconds as if they don't exist.</p> <p>Parameters:</p> Name Type Description Default <code>year</code> <code>int</code> <p>Year</p> required <code>month</code> <code>int</code> <p>Month (1-12)</p> required <code>day</code> <code>int</code> <p>Day of month (1-31)</p> required <code>hour</code> <code>int</code> <p>Hour (0-23)</p> required <code>minute</code> <code>int</code> <p>Minute (0-59)</p> required <code>second</code> <code>float</code> <p>Second with fractional part</p> required <code>nanosecond</code> <code>float</code> <p>Nanosecond component</p> required <p>Returns:</p> Name Type Description <code>float</code> <p>Modified Julian date of epoch</p>"},{"location":"library_api/index.html#brahe.download_c04_eop_file","title":"download_c04_eop_file  <code>builtin</code>","text":"<pre><code>download_c04_eop_file(filepath)\n</code></pre> <p>Download latest C04 Earth orientation parameter file. Will attempt to download the latest parameter file to the specified location. Creating any missing directories as required.</p> <p>The download source is the IERS Earth Orientation Data Products</p> <p>Parameters:</p> Name Type Description Default <code>filepath</code> <code>str</code> <p>Path of desired output file</p> required"},{"location":"library_api/index.html#brahe.download_standard_eop_file","title":"download_standard_eop_file  <code>builtin</code>","text":"<pre><code>download_standard_eop_file(filepath)\n</code></pre> <p>Download latest standard Earth orientation parameter file. Will attempt to download the latest parameter file to the specified location. Creating any missing directories as required.</p> <p>The download source is the IERS Earth Orientation Data Products</p> <p>Parameters:</p> Name Type Description Default <code>filepath</code> <code>str</code> <p>Path of desired output file</p> required"},{"location":"library_api/index.html#brahe.earth_rotation","title":"earth_rotation  <code>builtin</code>","text":"<pre><code>earth_rotation(epc)\n</code></pre> <p>Computes the Earth rotation matrix transforming the CIRS to the TIRS intermediate reference frame. This transformation corrects for the Earth rotation.</p> <p>Parameters:</p> Name Type Description Default <code>epc</code> <code>Epoch</code> <p>Epoch instant for computation of transformation matrix</p> required <p>Returns:</p> Type Description <p>numpy.ndarray: 3x3 rotation matrix transforming CIRS -&gt; TIRS</p>"},{"location":"library_api/index.html#brahe.epoch_from_tle","title":"epoch_from_tle  <code>builtin</code>","text":"<pre><code>epoch_from_tle(line1)\n</code></pre> <p>Extract Epoch from TLE line 1</p> <p>Extracts and parses the epoch timestamp from the first line of TLE data. The epoch is returned in UTC time system.</p> <p>Parameters:</p> Name Type Description Default <code>line1</code> <code>str</code> <p>First line of TLE data</p> required <p>Returns:</p> Name Type Description <code>Epoch</code> <p>Extracted epoch in UTC time system</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; line1 = \"1 25544U 98067A   21001.50000000  .00001764  00000-0  40967-4 0  9997\"\n&gt;&gt;&gt; epoch = epoch_from_tle(line1)\n&gt;&gt;&gt; epoch.year()\n2021\n</code></pre>"},{"location":"library_api/index.html#brahe.get_global_dxdy","title":"get_global_dxdy  <code>builtin</code>","text":"<pre><code>get_global_dxdy(mjd)\n</code></pre> <p>Get celestial pole offsets from the global EOP provider.</p> <p>Parameters:</p> Name Type Description Default <code>mjd</code> <code>float</code> <p>Modified Julian Date</p> required <p>Returns:</p> Type Description <p>tuple[float, float]: Celestial pole offsets dx and dy in radians</p>"},{"location":"library_api/index.html#brahe.get_global_eop","title":"get_global_eop  <code>builtin</code>","text":"<pre><code>get_global_eop(mjd)\n</code></pre> <p>Get all EOP parameters from the global EOP provider.</p> <p>Parameters:</p> Name Type Description Default <code>mjd</code> <code>float</code> <p>Modified Julian Date</p> required <p>Returns:</p> Type Description <p>tuple[float, float, float, float, float, float]: UT1-UTC, pm_x, pm_y, dx, dy, lod</p>"},{"location":"library_api/index.html#brahe.get_global_eop_extrapolation","title":"get_global_eop_extrapolation  <code>builtin</code>","text":"<pre><code>get_global_eop_extrapolation()\n</code></pre> <p>Get the extrapolation method of the global EOP provider.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>Extrapolation method string</p>"},{"location":"library_api/index.html#brahe.get_global_eop_initialization","title":"get_global_eop_initialization  <code>builtin</code>","text":"<pre><code>get_global_eop_initialization()\n</code></pre> <p>Check if the global EOP provider is initialized.</p> <p>Returns:</p> Name Type Description <code>bool</code> <p>True if global EOP provider is initialized</p>"},{"location":"library_api/index.html#brahe.get_global_eop_interpolation","title":"get_global_eop_interpolation  <code>builtin</code>","text":"<pre><code>get_global_eop_interpolation()\n</code></pre> <p>Check if interpolation is enabled in the global EOP provider.</p> <p>Returns:</p> Name Type Description <code>bool</code> <p>True if interpolation is enabled</p>"},{"location":"library_api/index.html#brahe.get_global_eop_len","title":"get_global_eop_len  <code>builtin</code>","text":"<pre><code>get_global_eop_len()\n</code></pre> <p>Get the number of EOP data points in the global provider.</p> <p>Returns:</p> Name Type Description <code>int</code> <p>Number of EOP data points</p>"},{"location":"library_api/index.html#brahe.get_global_eop_mjd_last_dxdy","title":"get_global_eop_mjd_last_dxdy  <code>builtin</code>","text":"<pre><code>get_global_eop_mjd_last_dxdy()\n</code></pre> <p>Get the last Modified Julian Date with dx/dy data in the global provider.</p> <p>Returns:</p> Name Type Description <code>float</code> <p>Last MJD with dx/dy data</p>"},{"location":"library_api/index.html#brahe.get_global_eop_mjd_last_lod","title":"get_global_eop_mjd_last_lod  <code>builtin</code>","text":"<pre><code>get_global_eop_mjd_last_lod()\n</code></pre> <p>Get the last Modified Julian Date with LOD data in the global provider.</p> <p>Returns:</p> Name Type Description <code>float</code> <p>Last MJD with LOD data</p>"},{"location":"library_api/index.html#brahe.get_global_eop_mjd_max","title":"get_global_eop_mjd_max  <code>builtin</code>","text":"<pre><code>get_global_eop_mjd_max()\n</code></pre> <p>Get the maximum Modified Julian Date in the global EOP dataset.</p> <p>Returns:</p> Name Type Description <code>float</code> <p>Maximum MJD</p>"},{"location":"library_api/index.html#brahe.get_global_eop_mjd_min","title":"get_global_eop_mjd_min  <code>builtin</code>","text":"<pre><code>get_global_eop_mjd_min()\n</code></pre> <p>Get the minimum Modified Julian Date in the global EOP dataset.</p> <p>Returns:</p> Name Type Description <code>float</code> <p>Minimum MJD</p>"},{"location":"library_api/index.html#brahe.get_global_eop_type","title":"get_global_eop_type  <code>builtin</code>","text":"<pre><code>get_global_eop_type()\n</code></pre> <p>Get the EOP data type of the global provider.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>EOP type string</p>"},{"location":"library_api/index.html#brahe.get_global_lod","title":"get_global_lod  <code>builtin</code>","text":"<pre><code>get_global_lod(mjd)\n</code></pre> <p>Get length of day offset from the global EOP provider.</p> <p>Parameters:</p> Name Type Description Default <code>mjd</code> <code>float</code> <p>Modified Julian Date</p> required <p>Returns:</p> Name Type Description <code>float</code> <p>Length of day offset in seconds</p>"},{"location":"library_api/index.html#brahe.get_global_pm","title":"get_global_pm  <code>builtin</code>","text":"<pre><code>get_global_pm(mjd)\n</code></pre> <p>Get polar motion components from the global EOP provider.</p> <p>Parameters:</p> Name Type Description Default <code>mjd</code> <code>float</code> <p>Modified Julian Date</p> required <p>Returns:</p> Type Description <p>tuple[float, float]: Polar motion x and y components in radians</p>"},{"location":"library_api/index.html#brahe.get_global_ut1_utc","title":"get_global_ut1_utc  <code>builtin</code>","text":"<pre><code>get_global_ut1_utc(mjd)\n</code></pre> <p>Get UT1-UTC time difference from the global EOP provider.</p> <p>Parameters:</p> Name Type Description Default <code>mjd</code> <code>float</code> <p>Modified Julian Date</p> required <p>Returns:</p> Name Type Description <code>float</code> <p>UT1-UTC time difference in seconds</p>"},{"location":"library_api/index.html#brahe.jd_to_datetime","title":"jd_to_datetime  <code>builtin</code>","text":"<pre><code>jd_to_datetime(jd)\n</code></pre> <p>Convert a Julian Date to the equivalent Gregorian calendar date.</p> <p>Note: Due to the ambiguity of the nature of leap second insertion, this method should not be used if a specific behavior for leap second insertion is expected. This method treats leap seconds as if they don't exist.</p> <p>Parameters:</p> Name Type Description Default <code>jd</code> <code>float</code> <p>Julian date</p> required <p>Returns:</p> Name Type Description <code>tuple</code> <p>A tuple containing (year, month, day, hour, minute, second, nanosecond)</p>"},{"location":"library_api/index.html#brahe.keplerian_elements_from_tle","title":"keplerian_elements_from_tle  <code>builtin</code>","text":"<pre><code>keplerian_elements_from_tle(line1, line2)\n</code></pre> <p>Extract Keplerian orbital elements from TLE lines.</p> <p>Extracts the standard six Keplerian orbital elements from Two-Line Element (TLE) data. Returns elements in standard order: [a, e, i, raan, argp, M] where angles are in radians.</p> <p>Parameters:</p> Name Type Description Default <code>line1</code> <code>str</code> <p>First line of TLE data.</p> required <code>line2</code> <code>str</code> <p>Second line of TLE data.</p> required <p>Returns:</p> Name Type Description <code>tuple</code> <p>A tuple containing: - epoch (Epoch): Epoch of the TLE data. - elements (numpy.ndarray): Six Keplerian elements [a, e, i, raan, argp, M] where   a is semi-major axis in meters, e is eccentricity (dimensionless), and   i, raan, argp, M are in radians.</p>"},{"location":"library_api/index.html#brahe.keplerian_elements_to_tle","title":"keplerian_elements_to_tle  <code>builtin</code>","text":"<pre><code>keplerian_elements_to_tle(epoch, elements, norad_id)\n</code></pre> <p>Convert Keplerian elements to TLE lines.</p> <p>Converts standard Keplerian orbital elements to Two-Line Element (TLE) format. Input angles should be in degrees for compatibility with TLE format.</p> <p>Parameters:</p> Name Type Description Default <code>epoch</code> <code>Epoch</code> <p>Epoch of the elements.</p> required <code>elements</code> <code>ndarray</code> <p>Keplerian elements [a (m), e, i (deg), raan (deg), argp (deg), M (deg)].</p> required <code>norad_id</code> <code>str</code> <p>NORAD catalog number (supports numeric and Alpha-5 format).</p> required <p>Returns:</p> Name Type Description <code>tuple</code> <p>A tuple containing (line1, line2) - the two TLE lines as strings.</p>"},{"location":"library_api/index.html#brahe.mean_motion","title":"mean_motion  <code>builtin</code>","text":"<pre><code>mean_motion(a, angle_format)\n</code></pre> <p>Computes the mean motion of an astronomical object around Earth.</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>float</code> <p>The semi-major axis of the astronomical object in meters.</p> required <code>angle_format</code> <code>AngleFormat</code> <p>Return output in AngleFormat.DEGREES or AngleFormat.RADIANS.</p> required <p>Returns:</p> Name Type Description <code>float</code> <p>The mean motion of the astronomical object in radians or degrees.</p>"},{"location":"library_api/index.html#brahe.mean_motion_general","title":"mean_motion_general  <code>builtin</code>","text":"<pre><code>mean_motion_general(a, gm, angle_format)\n</code></pre> <p>Computes the mean motion of an astronomical object around a general body given a semi-major axis.</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>float</code> <p>The semi-major axis of the astronomical object in meters.</p> required <code>gm</code> <code>float</code> <p>The standard gravitational parameter of primary body in m\u00b3/s\u00b2.</p> required <code>angle_format</code> <code>AngleFormat</code> <p>Return output in AngleFormat.DEGREES or AngleFormat.RADIANS.</p> required <p>Returns:</p> Name Type Description <code>float</code> <p>The mean motion of the astronomical object in radians or degrees.</p>"},{"location":"library_api/index.html#brahe.mjd_to_datetime","title":"mjd_to_datetime  <code>builtin</code>","text":"<pre><code>mjd_to_datetime(mjd)\n</code></pre> <p>Convert a Modified Julian Date to the equivalent Gregorian calendar date.</p> <p>Note: Due to the ambiguity of the nature of leap second insertion, this method should not be used if a specific behavior for leap second insertion is expected. This method treats leap seconds as if they don't exist.</p> <p>Parameters:</p> Name Type Description Default <code>mjd</code> <code>float</code> <p>Modified Julian date</p> required <p>Returns:</p> Name Type Description <code>tuple</code> <p>A tuple containing (year, month, day, hour, minute, second, nanosecond)</p>"},{"location":"library_api/index.html#brahe.norad_id_alpha5_to_numeric","title":"norad_id_alpha5_to_numeric  <code>builtin</code>","text":"<pre><code>norad_id_alpha5_to_numeric(alpha5_id)\n</code></pre> <p>Convert Alpha-5 NORAD ID to numeric format.</p> <p>Parameters:</p> Name Type Description Default <code>alpha5_id</code> <code>str</code> <p>Alpha-5 format ID (e.g., \"A0001\").</p> required <p>Returns:</p> Name Type Description <code>int</code> <p>Numeric NORAD ID.</p>"},{"location":"library_api/index.html#brahe.norad_id_numeric_to_alpha5","title":"norad_id_numeric_to_alpha5  <code>builtin</code>","text":"<pre><code>norad_id_numeric_to_alpha5(norad_id)\n</code></pre> <p>Convert numeric NORAD ID to Alpha-5 format.</p> <p>Parameters:</p> Name Type Description Default <code>norad_id</code> <code>int</code> <p>Numeric NORAD ID (100000-339999).</p> required <p>Returns:</p> Name Type Description <code>str</code> <p>Alpha-5 format ID (e.g., \"A0001\").</p>"},{"location":"library_api/index.html#brahe.orbital_period","title":"orbital_period  <code>builtin</code>","text":"<pre><code>orbital_period(a)\n</code></pre> <p>Computes the orbital period of an object around Earth.</p> <p>Uses rastro.constants.GM_EARTH as the standard gravitational parameter for the calculation.</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>float</code> <p>The semi-major axis of the astronomical object in meters.</p> required <p>Returns:</p> Name Type Description <code>float</code> <p>The orbital period of the astronomical object in seconds.</p>"},{"location":"library_api/index.html#brahe.orbital_period_general","title":"orbital_period_general  <code>builtin</code>","text":"<pre><code>orbital_period_general(a, gm)\n</code></pre> <p>Computes the orbital period of an astronomical object around a general body.</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>float</code> <p>The semi-major axis of the astronomical object in meters.</p> required <code>gm</code> <code>float</code> <p>The standard gravitational parameter of primary body in m\u00b3/s\u00b2.</p> required <p>Returns:</p> Name Type Description <code>float</code> <p>The orbital period of the astronomical object in seconds.</p>"},{"location":"library_api/index.html#brahe.parse_norad_id","title":"parse_norad_id  <code>builtin</code>","text":"<pre><code>parse_norad_id(norad_str)\n</code></pre> <p>Parse NORAD ID from string, handling both classic and Alpha-5 formats.</p> <p>Parameters:</p> Name Type Description Default <code>norad_str</code> <code>str</code> <p>NORAD ID string from TLE.</p> required <p>Returns:</p> Name Type Description <code>int</code> <p>Parsed numeric NORAD ID.</p>"},{"location":"library_api/index.html#brahe.periapsis_distance","title":"periapsis_distance  <code>builtin</code>","text":"<pre><code>periapsis_distance(a, e)\n</code></pre> <p>Calculate the distance of an object at its periapsis.</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>float</code> <p>The semi-major axis of the astronomical object in meters.</p> required <code>e</code> <code>float</code> <p>The eccentricity of the astronomical object's orbit (dimensionless).</p> required <p>Returns:</p> Name Type Description <code>float</code> <p>The distance of the object at periapsis in meters.</p>"},{"location":"library_api/index.html#brahe.periapsis_velocity","title":"periapsis_velocity  <code>builtin</code>","text":"<pre><code>periapsis_velocity(a, e, gm)\n</code></pre> <p>Computes the periapsis velocity of an astronomical object around a general body.</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>float</code> <p>The semi-major axis of the astronomical object in meters.</p> required <code>e</code> <code>float</code> <p>The eccentricity of the astronomical object's orbit (dimensionless).</p> required <code>gm</code> <code>float</code> <p>The standard gravitational parameter of primary body in m\u00b3/s\u00b2.</p> required <p>Returns:</p> Name Type Description <code>float</code> <p>The magnitude of velocity of the object at periapsis in m/s.</p>"},{"location":"library_api/index.html#brahe.perigee_velocity","title":"perigee_velocity  <code>builtin</code>","text":"<pre><code>perigee_velocity(a, e)\n</code></pre> <p>Computes the perigee velocity of an astronomical object around Earth.</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>float</code> <p>The semi-major axis of the astronomical object in meters.</p> required <code>e</code> <code>float</code> <p>The eccentricity of the astronomical object's orbit (dimensionless).</p> required <p>Returns:</p> Name Type Description <code>float</code> <p>The magnitude of velocity of the object at perigee in m/s.</p>"},{"location":"library_api/index.html#brahe.polar_motion","title":"polar_motion  <code>builtin</code>","text":"<pre><code>polar_motion(epc)\n</code></pre> <p>Computes the Earth rotation matrix transforming the TIRS to the ITRF reference frame.</p> <p>The function will utilize the global Earth orientation and loaded data to apply corrections to compute the polar motion correction based on empirical observations of polar motion drift.</p> <p>Parameters:</p> Name Type Description Default <code>epc</code> <code>Epoch</code> <p>Epoch instant for computation of transformation matrix</p> required <p>Returns:</p> Type Description <p>numpy.ndarray: 3x3 rotation matrix transforming TIRS -&gt; ITRF</p>"},{"location":"library_api/index.html#brahe.position_ecef_to_eci","title":"position_ecef_to_eci  <code>builtin</code>","text":"<pre><code>position_ecef_to_eci(epc, x)\n</code></pre> <p>Transforms a position vector from the Earth Centered Earth Fixed (ECEF/ITRF) frame to the Earth Centered Inertial (ECI/GCRF) frame.</p> <p>Applies the full IAU 2006/2000A transformation including bias, precession, nutation, Earth rotation, and polar motion corrections using global Earth orientation parameters.</p> <p>Parameters:</p> Name Type Description Default <code>epc</code> <code>Epoch</code> <p>Epoch instant for the transformation</p> required <code>x</code> <code>ndarray</code> <p>Position vector in ECEF frame (m), shape (3,)</p> required <p>Returns:</p> Type Description <p>numpy.ndarray: Position vector in ECI frame (m), shape (3,)</p>"},{"location":"library_api/index.html#brahe.position_ecef_to_geocentric","title":"position_ecef_to_geocentric  <code>builtin</code>","text":"<pre><code>position_ecef_to_geocentric(x_ecef, angle_format)\n</code></pre> <p>Convert ECEF Cartesian position to geocentric coordinates.</p> <p>Transforms a position from Earth-Centered Earth-Fixed (ECEF) Cartesian coordinates to geocentric spherical coordinates (latitude, longitude, radius).</p> <p>Parameters:</p> Name Type Description Default <code>x_ecef</code> <code>ndarray</code> <p>ECEF Cartesian position [x, y, z] in meters.</p> required <code>angle_format</code> <code>AngleFormat</code> <p>Angle format for output angular coordinates (RADIANS or DEGREES).</p> required <p>Returns:</p> Type Description <p>numpy.ndarray: Geocentric position [latitude, longitude, radius] where latitude is in radians or degrees, longitude is in radians or degrees, and radius is in meters.</p>"},{"location":"library_api/index.html#brahe.position_ecef_to_geodetic","title":"position_ecef_to_geodetic  <code>builtin</code>","text":"<pre><code>position_ecef_to_geodetic(x_ecef, angle_format)\n</code></pre> <p>Convert ECEF Cartesian position to geodetic coordinates.</p> <p>Transforms a position from Earth-Centered Earth-Fixed (ECEF) Cartesian coordinates to geodetic coordinates (latitude, longitude, altitude) using the WGS84 ellipsoid model.</p> <p>Parameters:</p> Name Type Description Default <code>x_ecef</code> <code>ndarray</code> <p>ECEF Cartesian position [x, y, z] in meters.</p> required <code>angle_format</code> <code>AngleFormat</code> <p>Angle format for output angular coordinates (RADIANS or DEGREES).</p> required <p>Returns:</p> Type Description <p>numpy.ndarray: Geodetic position [latitude, longitude, altitude] where latitude is in radians or degrees, longitude is in radians or degrees, and altitude is in meters above the WGS84 ellipsoid.</p>"},{"location":"library_api/index.html#brahe.position_eci_to_ecef","title":"position_eci_to_ecef  <code>builtin</code>","text":"<pre><code>position_eci_to_ecef(epc, x)\n</code></pre> <p>Transforms a position vector from the Earth Centered Inertial (ECI/GCRF) frame to the Earth Centered Earth Fixed (ECEF/ITRF) frame.</p> <p>Applies the full IAU 2006/2000A transformation including bias, precession, nutation, Earth rotation, and polar motion corrections using global Earth orientation parameters.</p> <p>Parameters:</p> Name Type Description Default <code>epc</code> <code>Epoch</code> <p>Epoch instant for the transformation</p> required <code>x</code> <code>ndarray</code> <p>Position vector in ECI frame (m), shape (3,)</p> required <p>Returns:</p> Type Description <p>numpy.ndarray: Position vector in ECEF frame (m), shape (3,)</p>"},{"location":"library_api/index.html#brahe.position_enz_to_azel","title":"position_enz_to_azel  <code>builtin</code>","text":"<pre><code>position_enz_to_azel(x_enz, angle_format)\n</code></pre> <p>Convert position from East-North-Up (ENZ) frame to azimuth-elevation-range.</p> <p>Transforms a position from the local East-North-Up (ENZ) topocentric frame to azimuth-elevation-range spherical coordinates.</p> <p>Parameters:</p> Name Type Description Default <code>x_enz</code> <code>ndarray</code> <p>Position in ENZ frame [east, north, up] in meters.</p> required <code>angle_format</code> <code>AngleFormat</code> <p>Angle format for output angular coordinates (RADIANS or DEGREES).</p> required <p>Returns:</p> Type Description <p>numpy.ndarray: Azimuth-elevation-range [azimuth, elevation, range] where azimuth and elevation are in radians or degrees, and range is in meters.</p>"},{"location":"library_api/index.html#brahe.position_geocentric_to_ecef","title":"position_geocentric_to_ecef  <code>builtin</code>","text":"<pre><code>position_geocentric_to_ecef(x_geoc, angle_format)\n</code></pre> <p>Convert geocentric position to ECEF Cartesian coordinates.</p> <p>Transforms a position from geocentric spherical coordinates (latitude, longitude, radius) to Earth-Centered Earth-Fixed (ECEF) Cartesian coordinates.</p> <p>Parameters:</p> Name Type Description Default <code>x_geoc</code> <code>ndarray</code> <p>Geocentric position [latitude, longitude, radius] where latitude is in radians or degrees, longitude is in radians or degrees, and radius is in meters.</p> required <code>angle_format</code> <code>AngleFormat</code> <p>Angle format for input angular coordinates (RADIANS or DEGREES).</p> required <p>Returns:</p> Type Description <p>numpy.ndarray: ECEF Cartesian position [x, y, z] in meters.</p>"},{"location":"library_api/index.html#brahe.position_geodetic_to_ecef","title":"position_geodetic_to_ecef  <code>builtin</code>","text":"<pre><code>position_geodetic_to_ecef(x_geod, angle_format)\n</code></pre> <p>Convert geodetic position to ECEF Cartesian coordinates.</p> <p>Transforms a position from geodetic coordinates (latitude, longitude, altitude) using the WGS84 ellipsoid model to Earth-Centered Earth-Fixed (ECEF) Cartesian coordinates.</p> <p>Parameters:</p> Name Type Description Default <code>x_geod</code> <code>ndarray</code> <p>Geodetic position [latitude, longitude, altitude] where latitude is in radians or degrees, longitude is in radians or degrees, and altitude is in meters above the WGS84 ellipsoid.</p> required <code>angle_format</code> <code>AngleFormat</code> <p>Angle format for input angular coordinates (RADIANS or DEGREES).</p> required <p>Returns:</p> Type Description <p>numpy.ndarray: ECEF Cartesian position [x, y, z] in meters.</p>"},{"location":"library_api/index.html#brahe.position_sez_to_azel","title":"position_sez_to_azel  <code>builtin</code>","text":"<pre><code>position_sez_to_azel(x_sez, angle_format)\n</code></pre> <p>Convert position from South-East-Zenith (SEZ) frame to azimuth-elevation-range.</p> <p>Transforms a position from the local South-East-Zenith (SEZ) topocentric frame to azimuth-elevation-range spherical coordinates.</p> <p>Parameters:</p> Name Type Description Default <code>x_sez</code> <code>ndarray</code> <p>Position in SEZ frame [south, east, zenith] in meters.</p> required <code>angle_format</code> <code>AngleFormat</code> <p>Angle format for output angular coordinates (RADIANS or DEGREES).</p> required <p>Returns:</p> Type Description <p>numpy.ndarray: Azimuth-elevation-range [azimuth, elevation, range] where azimuth and elevation are in radians or degrees, and range is in meters.</p>"},{"location":"library_api/index.html#brahe.relative_position_ecef_to_enz","title":"relative_position_ecef_to_enz  <code>builtin</code>","text":"<pre><code>relative_position_ecef_to_enz(location_ecef, r_ecef, conversion_type)\n</code></pre> <p>Convert relative position from ECEF to East-North-Up (ENZ) frame.</p> <p>Transforms a relative position vector from Earth-Centered Earth-Fixed (ECEF) coordinates to the local East-North-Up (ENZ) topocentric frame at the specified location.</p> <p>Parameters:</p> Name Type Description Default <code>location_ecef</code> <code>ndarray</code> <p>Reference location in ECEF coordinates [x, y, z] in meters.</p> required <code>r_ecef</code> <code>ndarray</code> <p>Position vector in ECEF coordinates [x, y, z] in meters.</p> required <code>conversion_type</code> <code>str</code> <p>Type of ellipsoidal conversion, either \"Geocentric\" or \"Geodetic\".</p> required <p>Returns:</p> Type Description <p>numpy.ndarray: Relative position in ENZ frame [east, north, up] in meters.</p>"},{"location":"library_api/index.html#brahe.relative_position_ecef_to_sez","title":"relative_position_ecef_to_sez  <code>builtin</code>","text":"<pre><code>relative_position_ecef_to_sez(location_ecef, r_ecef, conversion_type)\n</code></pre> <p>Convert relative position from ECEF to South-East-Zenith (SEZ) frame.</p> <p>Transforms a relative position vector from Earth-Centered Earth-Fixed (ECEF) coordinates to the local South-East-Zenith (SEZ) topocentric frame at the specified location.</p> <p>Parameters:</p> Name Type Description Default <code>location_ecef</code> <code>ndarray</code> <p>Reference location in ECEF coordinates [x, y, z] in meters.</p> required <code>r_ecef</code> <code>ndarray</code> <p>Position vector in ECEF coordinates [x, y, z] in meters.</p> required <code>conversion_type</code> <code>str</code> <p>Type of ellipsoidal conversion, either \"Geocentric\" or \"Geodetic\".</p> required <p>Returns:</p> Type Description <p>numpy.ndarray: Relative position in SEZ frame [south, east, zenith] in meters.</p>"},{"location":"library_api/index.html#brahe.relative_position_enz_to_ecef","title":"relative_position_enz_to_ecef  <code>builtin</code>","text":"<pre><code>relative_position_enz_to_ecef(location_ecef, r_enz, conversion_type)\n</code></pre> <p>Convert relative position from East-North-Up (ENZ) frame to ECEF.</p> <p>Transforms a relative position vector from the local East-North-Up (ENZ) topocentric frame to Earth-Centered Earth-Fixed (ECEF) coordinates at the specified location.</p> <p>Parameters:</p> Name Type Description Default <code>location_ecef</code> <code>ndarray</code> <p>Reference location in ECEF coordinates [x, y, z] in meters.</p> required <code>r_enz</code> <code>ndarray</code> <p>Relative position in ENZ frame [east, north, up] in meters.</p> required <code>conversion_type</code> <code>str</code> <p>Type of ellipsoidal conversion, either \"Geocentric\" or \"Geodetic\".</p> required <p>Returns:</p> Type Description <p>numpy.ndarray: Position vector in ECEF coordinates [x, y, z] in meters.</p>"},{"location":"library_api/index.html#brahe.relative_position_sez_to_ecef","title":"relative_position_sez_to_ecef  <code>builtin</code>","text":"<pre><code>relative_position_sez_to_ecef(location_ecef, x_sez, conversion_type)\n</code></pre> <p>Convert relative position from South-East-Zenith (SEZ) frame to ECEF.</p> <p>Transforms a relative position vector from the local South-East-Zenith (SEZ) topocentric frame to Earth-Centered Earth-Fixed (ECEF) coordinates at the specified location.</p> <p>Parameters:</p> Name Type Description Default <code>location_ecef</code> <code>ndarray</code> <p>Reference location in ECEF coordinates [x, y, z] in meters.</p> required <code>x_sez</code> <code>ndarray</code> <p>Relative position in SEZ frame [south, east, zenith] in meters.</p> required <code>conversion_type</code> <code>str</code> <p>Type of ellipsoidal conversion, either \"Geocentric\" or \"Geodetic\".</p> required <p>Returns:</p> Type Description <p>numpy.ndarray: Position vector in ECEF coordinates [x, y, z] in meters.</p>"},{"location":"library_api/index.html#brahe.rotation_ecef_to_eci","title":"rotation_ecef_to_eci  <code>builtin</code>","text":"<pre><code>rotation_ecef_to_eci(epc)\n</code></pre> <p>Computes the combined rotation matrix from the Earth-fixed to the inertial reference frame. Applies corrections for bias, precession, nutation, Earth-rotation, and polar motion.</p> <p>The transformation is accomplished using the IAU 2006/2000A, CIO-based theory using classical angles. The method as described in section 5.5 of the SOFA C transformation cookbook.</p> <p>The function will utilize the global Earth orientation and loaded data to apply corrections for Celestial Intermidate Pole (CIP) and polar motion drift derived from empirical observations.</p> <p>Parameters:</p> Name Type Description Default <code>epc</code> <code>Epoch</code> <p>Epoch instant for computation of transformation matrix</p> required <p>Returns:</p> Type Description <p>numpy.ndarray: 3x3 rotation matrix transforming ITRF -&gt; GCRF</p>"},{"location":"library_api/index.html#brahe.rotation_eci_to_ecef","title":"rotation_eci_to_ecef  <code>builtin</code>","text":"<pre><code>rotation_eci_to_ecef(epc)\n</code></pre> <p>Computes the combined rotation matrix from the inertial to the Earth-fixed reference frame. Applies corrections for bias, precession, nutation, Earth-rotation, and polar motion.</p> <p>The transformation is accomplished using the IAU 2006/2000A, CIO-based theory using classical angles. The method as described in section 5.5 of the SOFA C transformation cookbook.</p> <p>The function will utilize the global Earth orientation and loaded data to apply corrections for Celestial Intermidate Pole (CIP) and polar motion drift derived from empirical observations.</p> <p>Parameters:</p> Name Type Description Default <code>epc</code> <code>Epoch</code> <p>Epoch instant for computation of transformation matrix</p> required <p>Returns:</p> Type Description <p>numpy.ndarray: 3x3 rotation matrix transforming GCRF -&gt; ITRF</p>"},{"location":"library_api/index.html#brahe.rotation_ellipsoid_to_enz","title":"rotation_ellipsoid_to_enz  <code>builtin</code>","text":"<pre><code>rotation_ellipsoid_to_enz(x_ellipsoid, angle_format)\n</code></pre> <p>Compute rotation matrix from ellipsoidal coordinates to East-North-Up (ENZ) frame.</p> <p>Calculates the rotation matrix that transforms vectors from an ellipsoidal coordinate frame (geocentric or geodetic) to the local East-North-Up (ENZ) topocentric frame at the specified location.</p> <p>Parameters:</p> Name Type Description Default <code>x_ellipsoid</code> <code>ndarray</code> <p>Ellipsoidal position [latitude, longitude, altitude/radius] where latitude is in radians or degrees, longitude is in radians or degrees.</p> required <code>angle_format</code> <code>AngleFormat</code> <p>Angle format for input angular coordinates (RADIANS or DEGREES).</p> required <p>Returns:</p> Type Description <p>numpy.ndarray: 3x3 rotation matrix from ellipsoidal frame to ENZ frame.</p>"},{"location":"library_api/index.html#brahe.rotation_ellipsoid_to_sez","title":"rotation_ellipsoid_to_sez  <code>builtin</code>","text":"<pre><code>rotation_ellipsoid_to_sez(x_ellipsoid, angle_format)\n</code></pre> <p>Compute rotation matrix from ellipsoidal coordinates to South-East-Zenith (SEZ) frame.</p> <p>Calculates the rotation matrix that transforms vectors from an ellipsoidal coordinate frame (geocentric or geodetic) to the local South-East-Zenith (SEZ) topocentric frame at the specified location.</p> <p>Parameters:</p> Name Type Description Default <code>x_ellipsoid</code> <code>ndarray</code> <p>Ellipsoidal position [latitude, longitude, altitude/radius] where latitude is in radians or degrees, longitude is in radians or degrees.</p> required <code>angle_format</code> <code>AngleFormat</code> <p>Angle format for input angular coordinates (RADIANS or DEGREES).</p> required <p>Returns:</p> Type Description <p>numpy.ndarray: 3x3 rotation matrix from ellipsoidal frame to SEZ frame.</p>"},{"location":"library_api/index.html#brahe.rotation_enz_to_ellipsoid","title":"rotation_enz_to_ellipsoid  <code>builtin</code>","text":"<pre><code>rotation_enz_to_ellipsoid(x_ellipsoid, angle_format)\n</code></pre> <p>Compute rotation matrix from East-North-Up (ENZ) frame to ellipsoidal coordinates.</p> <p>Calculates the rotation matrix that transforms vectors from the local East-North-Up (ENZ) topocentric frame to an ellipsoidal coordinate frame (geocentric or geodetic) at the specified location.</p> <p>Parameters:</p> Name Type Description Default <code>x_ellipsoid</code> <code>ndarray</code> <p>Ellipsoidal position [latitude, longitude, altitude/radius] where latitude is in radians or degrees, longitude is in radians or degrees.</p> required <code>angle_format</code> <code>AngleFormat</code> <p>Angle format for input angular coordinates (RADIANS or DEGREES).</p> required <p>Returns:</p> Type Description <p>numpy.ndarray: 3x3 rotation matrix from ENZ frame to ellipsoidal frame.</p>"},{"location":"library_api/index.html#brahe.rotation_sez_to_ellipsoid","title":"rotation_sez_to_ellipsoid  <code>builtin</code>","text":"<pre><code>rotation_sez_to_ellipsoid(x_ellipsoid, angle_format)\n</code></pre> <p>Compute rotation matrix from South-East-Zenith (SEZ) frame to ellipsoidal coordinates.</p> <p>Calculates the rotation matrix that transforms vectors from the local South-East-Zenith (SEZ) topocentric frame to an ellipsoidal coordinate frame (geocentric or geodetic) at the specified location.</p> <p>Parameters:</p> Name Type Description Default <code>x_ellipsoid</code> <code>ndarray</code> <p>Ellipsoidal position [latitude, longitude, altitude/radius] where latitude is in radians or degrees, longitude is in radians or degrees.</p> required <code>angle_format</code> <code>AngleFormat</code> <p>Angle format for input angular coordinates (RADIANS or DEGREES).</p> required <p>Returns:</p> Type Description <p>numpy.ndarray: 3x3 rotation matrix from SEZ frame to ellipsoidal frame.</p>"},{"location":"library_api/index.html#brahe.semimajor_axis","title":"semimajor_axis  <code>builtin</code>","text":"<pre><code>semimajor_axis(n, angle_format)\n</code></pre> <p>Computes the semi-major axis of an astronomical object from Earth given the object's mean motion.</p> <p>Parameters:</p> Name Type Description Default <code>n</code> <code>float</code> <p>The mean motion of the astronomical object in radians or degrees.</p> required <code>angle_format</code> <code>AngleFormat</code> <p>Interpret mean motion as AngleFormat.DEGREES or AngleFormat.RADIANS.</p> required <p>Returns:</p> Name Type Description <code>float</code> <p>The semi-major axis of the astronomical object in meters.</p>"},{"location":"library_api/index.html#brahe.semimajor_axis_from_orbital_period","title":"semimajor_axis_from_orbital_period  <code>builtin</code>","text":"<pre><code>semimajor_axis_from_orbital_period(period)\n</code></pre> <p>Computes the semi-major axis from orbital period around Earth.</p> <p>Parameters:</p> Name Type Description Default <code>period</code> <code>float</code> <p>The orbital period in seconds.</p> required <p>Returns:</p> Name Type Description <code>float</code> <p>The semi-major axis in meters.</p>"},{"location":"library_api/index.html#brahe.semimajor_axis_from_orbital_period_general","title":"semimajor_axis_from_orbital_period_general  <code>builtin</code>","text":"<pre><code>semimajor_axis_from_orbital_period_general(period, gm)\n</code></pre> <p>Computes the semi-major axis from orbital period for a general body.</p> <p>Parameters:</p> Name Type Description Default <code>period</code> <code>float</code> <p>The orbital period in seconds.</p> required <code>gm</code> <code>float</code> <p>The standard gravitational parameter of primary body in m\u00b3/s\u00b2.</p> required <p>Returns:</p> Name Type Description <code>float</code> <p>The semi-major axis in meters.</p>"},{"location":"library_api/index.html#brahe.semimajor_axis_general","title":"semimajor_axis_general  <code>builtin</code>","text":"<pre><code>semimajor_axis_general(n, gm, angle_format)\n</code></pre> <p>Computes the semi-major axis of an astronomical object from a general body given the object's mean motion.</p> <p>Parameters:</p> Name Type Description Default <code>n</code> <code>float</code> <p>The mean motion of the astronomical object in radians or degrees.</p> required <code>gm</code> <code>float</code> <p>The standard gravitational parameter of primary body in m\u00b3/s\u00b2.</p> required <code>angle_format</code> <code>AngleFormat</code> <p>Interpret mean motion as AngleFormat.DEGREES or AngleFormat.RADIANS.</p> required <p>Returns:</p> Name Type Description <code>float</code> <p>The semi-major axis of the astronomical object in meters.</p>"},{"location":"library_api/index.html#brahe.set_global_eop_provider_from_file_provider","title":"set_global_eop_provider_from_file_provider  <code>builtin</code>","text":"<pre><code>set_global_eop_provider_from_file_provider(provider)\n</code></pre> <p>Set the global EOP provider using a file-based provider.</p> <p>Parameters:</p> Name Type Description Default <code>provider</code> <code>FileEOPProvider</code> <p>File-based EOP provider to set globally</p> required"},{"location":"library_api/index.html#brahe.set_global_eop_provider_from_static_provider","title":"set_global_eop_provider_from_static_provider  <code>builtin</code>","text":"<pre><code>set_global_eop_provider_from_static_provider(provider)\n</code></pre> <p>Set the global EOP provider using a static provider.</p> <p>Parameters:</p> Name Type Description Default <code>provider</code> <code>StaticEOPProvider</code> <p>Static EOP provider to set globally</p> required"},{"location":"library_api/index.html#brahe.state_cartesian_to_osculating","title":"state_cartesian_to_osculating  <code>builtin</code>","text":"<pre><code>state_cartesian_to_osculating(x_cart, angle_format)\n</code></pre> <p>Convert Cartesian state to osculating orbital elements.</p> <p>Transforms a state vector from Cartesian position and velocity coordinates to osculating Keplerian orbital elements.</p> <p>Parameters:</p> Name Type Description Default <code>x_cart</code> <code>ndarray</code> <p>Cartesian state [x, y, z, vx, vy, vz] where position is in meters and velocity is in meters per second.</p> required <code>angle_format</code> <code>AngleFormat</code> <p>Angle format for output angular elements (RADIANS or DEGREES).</p> required <p>Returns:</p> Type Description <p>numpy.ndarray: Osculating orbital elements [a, e, i, RAAN, omega, M] where a is semi-major axis (meters), e is eccentricity (dimensionless), i is inclination (radians or degrees), RAAN is right ascension of ascending node (radians or degrees), omega is argument of periapsis (radians or degrees), and M is mean anomaly (radians or degrees).</p>"},{"location":"library_api/index.html#brahe.state_ecef_to_eci","title":"state_ecef_to_eci  <code>builtin</code>","text":"<pre><code>state_ecef_to_eci(epc, x_ecef)\n</code></pre> <p>Transforms a state vector (position and velocity) from the Earth Centered Earth Fixed (ECEF/ITRF) frame to the Earth Centered Inertial (ECI/GCRF) frame.</p> <p>Applies the full IAU 2006/2000A transformation including bias, precession, nutation, Earth rotation, and polar motion corrections using global Earth orientation parameters. The velocity transformation accounts for the Earth's rotation rate.</p> <p>Parameters:</p> Name Type Description Default <code>epc</code> <code>Epoch</code> <p>Epoch instant for the transformation</p> required <code>x_ecef</code> <code>ndarray</code> <p>State vector in ECEF frame [position (m), velocity (m/s)], shape (6,)</p> required <p>Returns:</p> Type Description <p>numpy.ndarray: State vector in ECI frame [position (m), velocity (m/s)], shape (6,)</p>"},{"location":"library_api/index.html#brahe.state_eci_to_ecef","title":"state_eci_to_ecef  <code>builtin</code>","text":"<pre><code>state_eci_to_ecef(epc, x_eci)\n</code></pre> <p>Transforms a state vector (position and velocity) from the Earth Centered Inertial (ECI/GCRF) frame to the Earth Centered Earth Fixed (ECEF/ITRF) frame.</p> <p>Applies the full IAU 2006/2000A transformation including bias, precession, nutation, Earth rotation, and polar motion corrections using global Earth orientation parameters. The velocity transformation accounts for the Earth's rotation rate.</p> <p>Parameters:</p> Name Type Description Default <code>epc</code> <code>Epoch</code> <p>Epoch instant for the transformation</p> required <code>x_eci</code> <code>ndarray</code> <p>State vector in ECI frame [position (m), velocity (m/s)], shape (6,)</p> required <p>Returns:</p> Type Description <p>numpy.ndarray: State vector in ECEF frame [position (m), velocity (m/s)], shape (6,)</p>"},{"location":"library_api/index.html#brahe.state_osculating_to_cartesian","title":"state_osculating_to_cartesian  <code>builtin</code>","text":"<pre><code>state_osculating_to_cartesian(x_oe, angle_format)\n</code></pre> <p>Convert osculating orbital elements to Cartesian state.</p> <p>Transforms a state vector from osculating Keplerian orbital elements to Cartesian position and velocity coordinates.</p> <p>Parameters:</p> Name Type Description Default <code>x_oe</code> <code>ndarray</code> <p>Osculating orbital elements [a, e, i, RAAN, omega, M] where a is semi-major axis (meters), e is eccentricity (dimensionless), i is inclination (radians or degrees), RAAN is right ascension of ascending node (radians or degrees), omega is argument of periapsis (radians or degrees), and M is mean anomaly (radians or degrees).</p> required <code>angle_format</code> <code>AngleFormat</code> <p>Angle format for angular elements (RADIANS or DEGREES).</p> required <p>Returns:</p> Type Description <p>numpy.ndarray: Cartesian state [x, y, z, vx, vy, vz] where position is in meters and velocity is in meters per second.</p>"},{"location":"library_api/index.html#brahe.sun_synchronous_inclination","title":"sun_synchronous_inclination  <code>builtin</code>","text":"<pre><code>sun_synchronous_inclination(a, e, angle_format)\n</code></pre> <p>Computes the inclination for a Sun-synchronous orbit around Earth based on the J2 gravitational perturbation.</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>float</code> <p>The semi-major axis of the astronomical object in meters.</p> required <code>e</code> <code>float</code> <p>The eccentricity of the astronomical object's orbit (dimensionless).</p> required <code>angle_format</code> <code>AngleFormat</code> <p>Return output in AngleFormat.DEGREES or AngleFormat.RADIANS.</p> required <p>Returns:</p> Name Type Description <code>float</code> <p>Inclination for a Sun synchronous orbit in degrees or radians.</p>"},{"location":"library_api/index.html#brahe.time_system_offset_for_datetime","title":"time_system_offset_for_datetime  <code>builtin</code>","text":"<pre><code>time_system_offset_for_datetime(year, month, day, hour, minute, second, nanosecond, time_system_src, time_system_dst)\n</code></pre> <p>Calculate the offset between two time systems for a given Gregorian calendar date.</p> <p>Parameters:</p> Name Type Description Default <code>year</code> <code>int</code> <p>Year</p> required <code>month</code> <code>int</code> <p>Month (1-12)</p> required <code>day</code> <code>int</code> <p>Day of month (1-31)</p> required <code>hour</code> <code>int</code> <p>Hour (0-23)</p> required <code>minute</code> <code>int</code> <p>Minute (0-59)</p> required <code>second</code> <code>float</code> <p>Second with fractional part</p> required <code>nanosecond</code> <code>float</code> <p>Nanosecond component</p> required <code>time_system_src</code> <code>TimeSystem</code> <p>Source time system</p> required <code>time_system_dst</code> <code>TimeSystem</code> <p>Destination time system</p> required <p>Returns:</p> Name Type Description <code>float</code> <p>Offset between time systems in seconds</p>"},{"location":"library_api/index.html#brahe.time_system_offset_for_jd","title":"time_system_offset_for_jd  <code>builtin</code>","text":"<pre><code>time_system_offset_for_jd(jd, time_system_src, time_system_dst)\n</code></pre> <p>Calculate the offset between two time systems for a given Julian Date.</p> <p>Parameters:</p> Name Type Description Default <code>jd</code> <code>float</code> <p>Julian date</p> required <code>time_system_src</code> <code>TimeSystem</code> <p>Source time system</p> required <code>time_system_dst</code> <code>TimeSystem</code> <p>Destination time system</p> required <p>Returns:</p> Name Type Description <code>float</code> <p>Offset between time systems in seconds</p>"},{"location":"library_api/index.html#brahe.time_system_offset_for_mjd","title":"time_system_offset_for_mjd  <code>builtin</code>","text":"<pre><code>time_system_offset_for_mjd(mjd, time_system_src, time_system_dst)\n</code></pre> <p>Calculate the offset between two time systems for a given Modified Julian Date.</p> <p>Parameters:</p> Name Type Description Default <code>mjd</code> <code>float</code> <p>Modified Julian date</p> required <code>time_system_src</code> <code>TimeSystem</code> <p>Source time system</p> required <code>time_system_dst</code> <code>TimeSystem</code> <p>Destination time system</p> required <p>Returns:</p> Name Type Description <code>float</code> <p>Offset between time systems in seconds</p>"},{"location":"library_api/index.html#brahe.validate_tle_line","title":"validate_tle_line  <code>builtin</code>","text":"<pre><code>validate_tle_line(line)\n</code></pre> <p>Validate single TLE line.</p> <p>Parameters:</p> Name Type Description Default <code>line</code> <code>str</code> <p>TLE line to validate.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>True if the line is valid.</p>"},{"location":"library_api/index.html#brahe.validate_tle_lines","title":"validate_tle_lines  <code>builtin</code>","text":"<pre><code>validate_tle_lines(line1, line2)\n</code></pre> <p>Validate TLE lines.</p> <p>Parameters:</p> Name Type Description Default <code>line1</code> <code>str</code> <p>First line of TLE data.</p> required <code>line2</code> <code>str</code> <p>Second line of TLE data.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>True if both lines are valid.</p>"},{"location":"library_api/attitude.html","title":"Attitude Module","text":"<p>Attitude representations and conversions.</p>"},{"location":"library_api/attitude.html#brahe.attitude","title":"attitude","text":"<p>Attitude Module</p> <p>Attitude representations and conversions.</p> <p>This module provides multiple representations of spacecraft attitude/orientation:</p> <p>Quaternion: - Quaternion representation (4-parameter) - Quaternion algebra operations - Conversions to/from other representations</p> <p>Euler Angles: - Multiple Euler angle sequences (3-1-3, 3-2-1, etc.) - Conversions to/from other representations</p> <p>Euler Axis: - Euler axis-angle representation (rotation vector) - Conversions to/from other representations</p> <p>Rotation Matrix: - Direction Cosine Matrix (DCM) representation - Matrix operations and compositions - Conversions to/from other representations</p> <p>All attitude representations can be converted between each other, providing flexibility in how orientation is specified and computed.</p>"},{"location":"library_api/constants.html","title":"Constants Module","text":"<p>Mathematical, physical, and astronomical constants.</p>"},{"location":"library_api/constants.html#brahe.constants","title":"constants","text":"<p>Constants Module</p> <p>Mathematical, physical, and astronomical constants used throughout Brahe.</p> <p>This module provides: - Mathematical constants (\u03c0 conversions, angle conversions) - Time system constants (offsets, epoch definitions) - Physical constants (speed of light, astronomical unit) - Earth constants (radius, GM, shape parameters) - Planetary constants (GM values for solar system bodies)</p>"},{"location":"library_api/constants.html#brahe.constants.AS2RAD","title":"AS2RAD  <code>module-attribute</code>","text":"<pre><code>AS2RAD = 4.84813681109536e-06\n</code></pre> <p>Convert a string or number to a floating-point number, if possible.</p>"},{"location":"library_api/constants.html#brahe.constants.AU","title":"AU  <code>module-attribute</code>","text":"<pre><code>AU = 149597870700.0\n</code></pre> <p>Convert a string or number to a floating-point number, if possible.</p>"},{"location":"library_api/constants.html#brahe.constants.C_LIGHT","title":"C_LIGHT  <code>module-attribute</code>","text":"<pre><code>C_LIGHT = 299792458.0\n</code></pre> <p>Convert a string or number to a floating-point number, if possible.</p>"},{"location":"library_api/constants.html#brahe.constants.DEG2RAD","title":"DEG2RAD  <code>module-attribute</code>","text":"<pre><code>DEG2RAD = 0.017453292519943295\n</code></pre> <p>Convert a string or number to a floating-point number, if possible.</p>"},{"location":"library_api/constants.html#brahe.constants.ECC_EARTH","title":"ECC_EARTH  <code>module-attribute</code>","text":"<pre><code>ECC_EARTH = 0.081819190842622\n</code></pre> <p>Convert a string or number to a floating-point number, if possible.</p>"},{"location":"library_api/constants.html#brahe.constants.GM_EARTH","title":"GM_EARTH  <code>module-attribute</code>","text":"<pre><code>GM_EARTH = 398600441500000.0\n</code></pre> <p>Convert a string or number to a floating-point number, if possible.</p>"},{"location":"library_api/constants.html#brahe.constants.GM_JUPITER","title":"GM_JUPITER  <code>module-attribute</code>","text":"<pre><code>GM_JUPITER = 1.267127648e+17\n</code></pre> <p>Convert a string or number to a floating-point number, if possible.</p>"},{"location":"library_api/constants.html#brahe.constants.GM_MARS","title":"GM_MARS  <code>module-attribute</code>","text":"<pre><code>GM_MARS = 42828375210000.0\n</code></pre> <p>Convert a string or number to a floating-point number, if possible.</p>"},{"location":"library_api/constants.html#brahe.constants.GM_MERCURY","title":"GM_MERCURY  <code>module-attribute</code>","text":"<pre><code>GM_MERCURY = 22031780000000.0\n</code></pre> <p>Convert a string or number to a floating-point number, if possible.</p>"},{"location":"library_api/constants.html#brahe.constants.GM_MOON","title":"GM_MOON  <code>module-attribute</code>","text":"<pre><code>GM_MOON = 4902800066000.0\n</code></pre> <p>Convert a string or number to a floating-point number, if possible.</p>"},{"location":"library_api/constants.html#brahe.constants.GM_NEPTUNE","title":"GM_NEPTUNE  <code>module-attribute</code>","text":"<pre><code>GM_NEPTUNE = 6836527100580000.0\n</code></pre> <p>Convert a string or number to a floating-point number, if possible.</p>"},{"location":"library_api/constants.html#brahe.constants.GM_PLUTO","title":"GM_PLUTO  <code>module-attribute</code>","text":"<pre><code>GM_PLUTO = 977000000000.0\n</code></pre> <p>Convert a string or number to a floating-point number, if possible.</p>"},{"location":"library_api/constants.html#brahe.constants.GM_SATURN","title":"GM_SATURN  <code>module-attribute</code>","text":"<pre><code>GM_SATURN = 3.79405852e+16\n</code></pre> <p>Convert a string or number to a floating-point number, if possible.</p>"},{"location":"library_api/constants.html#brahe.constants.GM_SUN","title":"GM_SUN  <code>module-attribute</code>","text":"<pre><code>GM_SUN = 1.327124400419394e+20\n</code></pre> <p>Convert a string or number to a floating-point number, if possible.</p>"},{"location":"library_api/constants.html#brahe.constants.GM_URANUS","title":"GM_URANUS  <code>module-attribute</code>","text":"<pre><code>GM_URANUS = 5794548600000000.0\n</code></pre> <p>Convert a string or number to a floating-point number, if possible.</p>"},{"location":"library_api/constants.html#brahe.constants.GM_VENUS","title":"GM_VENUS  <code>module-attribute</code>","text":"<pre><code>GM_VENUS = 324858592000000.0\n</code></pre> <p>Convert a string or number to a floating-point number, if possible.</p>"},{"location":"library_api/constants.html#brahe.constants.GPS_TAI","title":"GPS_TAI  <code>module-attribute</code>","text":"<pre><code>GPS_TAI = -19.0\n</code></pre> <p>Convert a string or number to a floating-point number, if possible.</p>"},{"location":"library_api/constants.html#brahe.constants.GPS_TT","title":"GPS_TT  <code>module-attribute</code>","text":"<pre><code>GPS_TT = -51.184\n</code></pre> <p>Convert a string or number to a floating-point number, if possible.</p>"},{"location":"library_api/constants.html#brahe.constants.GPS_ZERO","title":"GPS_ZERO  <code>module-attribute</code>","text":"<pre><code>GPS_ZERO = 44244.0\n</code></pre> <p>Convert a string or number to a floating-point number, if possible.</p>"},{"location":"library_api/constants.html#brahe.constants.J2_EARTH","title":"J2_EARTH  <code>module-attribute</code>","text":"<pre><code>J2_EARTH = 0.0010826358191967\n</code></pre> <p>Convert a string or number to a floating-point number, if possible.</p>"},{"location":"library_api/constants.html#brahe.constants.MJD2000","title":"MJD2000  <code>module-attribute</code>","text":"<pre><code>MJD2000 = 51544.5\n</code></pre> <p>Convert a string or number to a floating-point number, if possible.</p>"},{"location":"library_api/constants.html#brahe.constants.MJD_ZERO","title":"MJD_ZERO  <code>module-attribute</code>","text":"<pre><code>MJD_ZERO = 2400000.5\n</code></pre> <p>Convert a string or number to a floating-point number, if possible.</p>"},{"location":"library_api/constants.html#brahe.constants.OMEGA_EARTH","title":"OMEGA_EARTH  <code>module-attribute</code>","text":"<pre><code>OMEGA_EARTH = 7.292115146706979e-05\n</code></pre> <p>Convert a string or number to a floating-point number, if possible.</p>"},{"location":"library_api/constants.html#brahe.constants.P_SUN","title":"P_SUN  <code>module-attribute</code>","text":"<pre><code>P_SUN = 4.56e-06\n</code></pre> <p>Convert a string or number to a floating-point number, if possible.</p>"},{"location":"library_api/constants.html#brahe.constants.RAD2AS","title":"RAD2AS  <code>module-attribute</code>","text":"<pre><code>RAD2AS = 206264.80624709636\n</code></pre> <p>Convert a string or number to a floating-point number, if possible.</p>"},{"location":"library_api/constants.html#brahe.constants.RAD2DEG","title":"RAD2DEG  <code>module-attribute</code>","text":"<pre><code>RAD2DEG = 57.29577951308232\n</code></pre> <p>Convert a string or number to a floating-point number, if possible.</p>"},{"location":"library_api/constants.html#brahe.constants.R_EARTH","title":"R_EARTH  <code>module-attribute</code>","text":"<pre><code>R_EARTH = 6378136.3\n</code></pre> <p>Convert a string or number to a floating-point number, if possible.</p>"},{"location":"library_api/constants.html#brahe.constants.R_MOON","title":"R_MOON  <code>module-attribute</code>","text":"<pre><code>R_MOON = 1738000.0\n</code></pre> <p>Convert a string or number to a floating-point number, if possible.</p>"},{"location":"library_api/constants.html#brahe.constants.R_SUN","title":"R_SUN  <code>module-attribute</code>","text":"<pre><code>R_SUN = 695700000.0\n</code></pre> <p>Convert a string or number to a floating-point number, if possible.</p>"},{"location":"library_api/constants.html#brahe.constants.TAI_GPS","title":"TAI_GPS  <code>module-attribute</code>","text":"<pre><code>TAI_GPS = 19.0\n</code></pre> <p>Convert a string or number to a floating-point number, if possible.</p>"},{"location":"library_api/constants.html#brahe.constants.TAI_TT","title":"TAI_TT  <code>module-attribute</code>","text":"<pre><code>TAI_TT = -32.184\n</code></pre> <p>Convert a string or number to a floating-point number, if possible.</p>"},{"location":"library_api/constants.html#brahe.constants.TT_GPS","title":"TT_GPS  <code>module-attribute</code>","text":"<pre><code>TT_GPS = 51.184\n</code></pre> <p>Convert a string or number to a floating-point number, if possible.</p>"},{"location":"library_api/constants.html#brahe.constants.TT_TAI","title":"TT_TAI  <code>module-attribute</code>","text":"<pre><code>TT_TAI = 32.184\n</code></pre> <p>Convert a string or number to a floating-point number, if possible.</p>"},{"location":"library_api/constants.html#brahe.constants.WGS84_A","title":"WGS84_A  <code>module-attribute</code>","text":"<pre><code>WGS84_A = 6378137.0\n</code></pre> <p>Convert a string or number to a floating-point number, if possible.</p>"},{"location":"library_api/constants.html#brahe.constants.WGS84_F","title":"WGS84_F  <code>module-attribute</code>","text":"<pre><code>WGS84_F = 0.0033528106647474805\n</code></pre> <p>Convert a string or number to a floating-point number, if possible.</p>"},{"location":"library_api/coordinates.html","title":"Coordinates Module","text":"<p>Coordinate system transformations for satellite dynamics.</p>"},{"location":"library_api/coordinates.html#brahe.coordinates","title":"coordinates","text":"<p>Coordinates Module</p> <p>Coordinate system transformations for satellite dynamics.</p> <p>This module provides transformations between various coordinate representations:</p> <p>Cartesian Coordinates: - State vector (position + velocity) representations - Conversions to/from osculating Keplerian elements</p> <p>Geocentric Coordinates: - Spherical geocentric coordinates (latitude, longitude, altitude) - Conversions to/from ECEF Cartesian coordinates</p> <p>Geodetic Coordinates: - WGS84 geodetic coordinates (latitude, longitude, altitude) - Conversions to/from ECEF Cartesian coordinates</p> <p>Topocentric Coordinates: - East-North-Zenith (ENZ) local coordinate system - South-East-Zenith (SEZ) local coordinate system - Azimuth-Elevation transformations - Station-relative position and velocity</p>"},{"location":"library_api/coordinates.html#brahe.coordinates.position_ecef_to_geocentric","title":"position_ecef_to_geocentric  <code>builtin</code>","text":"<pre><code>position_ecef_to_geocentric(x_ecef, angle_format)\n</code></pre> <p>Convert ECEF Cartesian position to geocentric coordinates.</p> <p>Transforms a position from Earth-Centered Earth-Fixed (ECEF) Cartesian coordinates to geocentric spherical coordinates (latitude, longitude, radius).</p> <p>Parameters:</p> Name Type Description Default <code>x_ecef</code> <code>ndarray</code> <p>ECEF Cartesian position [x, y, z] in meters.</p> required <code>angle_format</code> <code>AngleFormat</code> <p>Angle format for output angular coordinates (RADIANS or DEGREES).</p> required <p>Returns:</p> Type Description <p>numpy.ndarray: Geocentric position [latitude, longitude, radius] where latitude is in radians or degrees, longitude is in radians or degrees, and radius is in meters.</p>"},{"location":"library_api/coordinates.html#brahe.coordinates.position_ecef_to_geodetic","title":"position_ecef_to_geodetic  <code>builtin</code>","text":"<pre><code>position_ecef_to_geodetic(x_ecef, angle_format)\n</code></pre> <p>Convert ECEF Cartesian position to geodetic coordinates.</p> <p>Transforms a position from Earth-Centered Earth-Fixed (ECEF) Cartesian coordinates to geodetic coordinates (latitude, longitude, altitude) using the WGS84 ellipsoid model.</p> <p>Parameters:</p> Name Type Description Default <code>x_ecef</code> <code>ndarray</code> <p>ECEF Cartesian position [x, y, z] in meters.</p> required <code>angle_format</code> <code>AngleFormat</code> <p>Angle format for output angular coordinates (RADIANS or DEGREES).</p> required <p>Returns:</p> Type Description <p>numpy.ndarray: Geodetic position [latitude, longitude, altitude] where latitude is in radians or degrees, longitude is in radians or degrees, and altitude is in meters above the WGS84 ellipsoid.</p>"},{"location":"library_api/coordinates.html#brahe.coordinates.position_enz_to_azel","title":"position_enz_to_azel  <code>builtin</code>","text":"<pre><code>position_enz_to_azel(x_enz, angle_format)\n</code></pre> <p>Convert position from East-North-Up (ENZ) frame to azimuth-elevation-range.</p> <p>Transforms a position from the local East-North-Up (ENZ) topocentric frame to azimuth-elevation-range spherical coordinates.</p> <p>Parameters:</p> Name Type Description Default <code>x_enz</code> <code>ndarray</code> <p>Position in ENZ frame [east, north, up] in meters.</p> required <code>angle_format</code> <code>AngleFormat</code> <p>Angle format for output angular coordinates (RADIANS or DEGREES).</p> required <p>Returns:</p> Type Description <p>numpy.ndarray: Azimuth-elevation-range [azimuth, elevation, range] where azimuth and elevation are in radians or degrees, and range is in meters.</p>"},{"location":"library_api/coordinates.html#brahe.coordinates.position_geocentric_to_ecef","title":"position_geocentric_to_ecef  <code>builtin</code>","text":"<pre><code>position_geocentric_to_ecef(x_geoc, angle_format)\n</code></pre> <p>Convert geocentric position to ECEF Cartesian coordinates.</p> <p>Transforms a position from geocentric spherical coordinates (latitude, longitude, radius) to Earth-Centered Earth-Fixed (ECEF) Cartesian coordinates.</p> <p>Parameters:</p> Name Type Description Default <code>x_geoc</code> <code>ndarray</code> <p>Geocentric position [latitude, longitude, radius] where latitude is in radians or degrees, longitude is in radians or degrees, and radius is in meters.</p> required <code>angle_format</code> <code>AngleFormat</code> <p>Angle format for input angular coordinates (RADIANS or DEGREES).</p> required <p>Returns:</p> Type Description <p>numpy.ndarray: ECEF Cartesian position [x, y, z] in meters.</p>"},{"location":"library_api/coordinates.html#brahe.coordinates.position_geodetic_to_ecef","title":"position_geodetic_to_ecef  <code>builtin</code>","text":"<pre><code>position_geodetic_to_ecef(x_geod, angle_format)\n</code></pre> <p>Convert geodetic position to ECEF Cartesian coordinates.</p> <p>Transforms a position from geodetic coordinates (latitude, longitude, altitude) using the WGS84 ellipsoid model to Earth-Centered Earth-Fixed (ECEF) Cartesian coordinates.</p> <p>Parameters:</p> Name Type Description Default <code>x_geod</code> <code>ndarray</code> <p>Geodetic position [latitude, longitude, altitude] where latitude is in radians or degrees, longitude is in radians or degrees, and altitude is in meters above the WGS84 ellipsoid.</p> required <code>angle_format</code> <code>AngleFormat</code> <p>Angle format for input angular coordinates (RADIANS or DEGREES).</p> required <p>Returns:</p> Type Description <p>numpy.ndarray: ECEF Cartesian position [x, y, z] in meters.</p>"},{"location":"library_api/coordinates.html#brahe.coordinates.position_sez_to_azel","title":"position_sez_to_azel  <code>builtin</code>","text":"<pre><code>position_sez_to_azel(x_sez, angle_format)\n</code></pre> <p>Convert position from South-East-Zenith (SEZ) frame to azimuth-elevation-range.</p> <p>Transforms a position from the local South-East-Zenith (SEZ) topocentric frame to azimuth-elevation-range spherical coordinates.</p> <p>Parameters:</p> Name Type Description Default <code>x_sez</code> <code>ndarray</code> <p>Position in SEZ frame [south, east, zenith] in meters.</p> required <code>angle_format</code> <code>AngleFormat</code> <p>Angle format for output angular coordinates (RADIANS or DEGREES).</p> required <p>Returns:</p> Type Description <p>numpy.ndarray: Azimuth-elevation-range [azimuth, elevation, range] where azimuth and elevation are in radians or degrees, and range is in meters.</p>"},{"location":"library_api/coordinates.html#brahe.coordinates.relative_position_ecef_to_enz","title":"relative_position_ecef_to_enz  <code>builtin</code>","text":"<pre><code>relative_position_ecef_to_enz(location_ecef, r_ecef, conversion_type)\n</code></pre> <p>Convert relative position from ECEF to East-North-Up (ENZ) frame.</p> <p>Transforms a relative position vector from Earth-Centered Earth-Fixed (ECEF) coordinates to the local East-North-Up (ENZ) topocentric frame at the specified location.</p> <p>Parameters:</p> Name Type Description Default <code>location_ecef</code> <code>ndarray</code> <p>Reference location in ECEF coordinates [x, y, z] in meters.</p> required <code>r_ecef</code> <code>ndarray</code> <p>Position vector in ECEF coordinates [x, y, z] in meters.</p> required <code>conversion_type</code> <code>str</code> <p>Type of ellipsoidal conversion, either \"Geocentric\" or \"Geodetic\".</p> required <p>Returns:</p> Type Description <p>numpy.ndarray: Relative position in ENZ frame [east, north, up] in meters.</p>"},{"location":"library_api/coordinates.html#brahe.coordinates.relative_position_ecef_to_sez","title":"relative_position_ecef_to_sez  <code>builtin</code>","text":"<pre><code>relative_position_ecef_to_sez(location_ecef, r_ecef, conversion_type)\n</code></pre> <p>Convert relative position from ECEF to South-East-Zenith (SEZ) frame.</p> <p>Transforms a relative position vector from Earth-Centered Earth-Fixed (ECEF) coordinates to the local South-East-Zenith (SEZ) topocentric frame at the specified location.</p> <p>Parameters:</p> Name Type Description Default <code>location_ecef</code> <code>ndarray</code> <p>Reference location in ECEF coordinates [x, y, z] in meters.</p> required <code>r_ecef</code> <code>ndarray</code> <p>Position vector in ECEF coordinates [x, y, z] in meters.</p> required <code>conversion_type</code> <code>str</code> <p>Type of ellipsoidal conversion, either \"Geocentric\" or \"Geodetic\".</p> required <p>Returns:</p> Type Description <p>numpy.ndarray: Relative position in SEZ frame [south, east, zenith] in meters.</p>"},{"location":"library_api/coordinates.html#brahe.coordinates.relative_position_enz_to_ecef","title":"relative_position_enz_to_ecef  <code>builtin</code>","text":"<pre><code>relative_position_enz_to_ecef(location_ecef, r_enz, conversion_type)\n</code></pre> <p>Convert relative position from East-North-Up (ENZ) frame to ECEF.</p> <p>Transforms a relative position vector from the local East-North-Up (ENZ) topocentric frame to Earth-Centered Earth-Fixed (ECEF) coordinates at the specified location.</p> <p>Parameters:</p> Name Type Description Default <code>location_ecef</code> <code>ndarray</code> <p>Reference location in ECEF coordinates [x, y, z] in meters.</p> required <code>r_enz</code> <code>ndarray</code> <p>Relative position in ENZ frame [east, north, up] in meters.</p> required <code>conversion_type</code> <code>str</code> <p>Type of ellipsoidal conversion, either \"Geocentric\" or \"Geodetic\".</p> required <p>Returns:</p> Type Description <p>numpy.ndarray: Position vector in ECEF coordinates [x, y, z] in meters.</p>"},{"location":"library_api/coordinates.html#brahe.coordinates.relative_position_sez_to_ecef","title":"relative_position_sez_to_ecef  <code>builtin</code>","text":"<pre><code>relative_position_sez_to_ecef(location_ecef, x_sez, conversion_type)\n</code></pre> <p>Convert relative position from South-East-Zenith (SEZ) frame to ECEF.</p> <p>Transforms a relative position vector from the local South-East-Zenith (SEZ) topocentric frame to Earth-Centered Earth-Fixed (ECEF) coordinates at the specified location.</p> <p>Parameters:</p> Name Type Description Default <code>location_ecef</code> <code>ndarray</code> <p>Reference location in ECEF coordinates [x, y, z] in meters.</p> required <code>x_sez</code> <code>ndarray</code> <p>Relative position in SEZ frame [south, east, zenith] in meters.</p> required <code>conversion_type</code> <code>str</code> <p>Type of ellipsoidal conversion, either \"Geocentric\" or \"Geodetic\".</p> required <p>Returns:</p> Type Description <p>numpy.ndarray: Position vector in ECEF coordinates [x, y, z] in meters.</p>"},{"location":"library_api/coordinates.html#brahe.coordinates.rotation_ellipsoid_to_enz","title":"rotation_ellipsoid_to_enz  <code>builtin</code>","text":"<pre><code>rotation_ellipsoid_to_enz(x_ellipsoid, angle_format)\n</code></pre> <p>Compute rotation matrix from ellipsoidal coordinates to East-North-Up (ENZ) frame.</p> <p>Calculates the rotation matrix that transforms vectors from an ellipsoidal coordinate frame (geocentric or geodetic) to the local East-North-Up (ENZ) topocentric frame at the specified location.</p> <p>Parameters:</p> Name Type Description Default <code>x_ellipsoid</code> <code>ndarray</code> <p>Ellipsoidal position [latitude, longitude, altitude/radius] where latitude is in radians or degrees, longitude is in radians or degrees.</p> required <code>angle_format</code> <code>AngleFormat</code> <p>Angle format for input angular coordinates (RADIANS or DEGREES).</p> required <p>Returns:</p> Type Description <p>numpy.ndarray: 3x3 rotation matrix from ellipsoidal frame to ENZ frame.</p>"},{"location":"library_api/coordinates.html#brahe.coordinates.rotation_ellipsoid_to_sez","title":"rotation_ellipsoid_to_sez  <code>builtin</code>","text":"<pre><code>rotation_ellipsoid_to_sez(x_ellipsoid, angle_format)\n</code></pre> <p>Compute rotation matrix from ellipsoidal coordinates to South-East-Zenith (SEZ) frame.</p> <p>Calculates the rotation matrix that transforms vectors from an ellipsoidal coordinate frame (geocentric or geodetic) to the local South-East-Zenith (SEZ) topocentric frame at the specified location.</p> <p>Parameters:</p> Name Type Description Default <code>x_ellipsoid</code> <code>ndarray</code> <p>Ellipsoidal position [latitude, longitude, altitude/radius] where latitude is in radians or degrees, longitude is in radians or degrees.</p> required <code>angle_format</code> <code>AngleFormat</code> <p>Angle format for input angular coordinates (RADIANS or DEGREES).</p> required <p>Returns:</p> Type Description <p>numpy.ndarray: 3x3 rotation matrix from ellipsoidal frame to SEZ frame.</p>"},{"location":"library_api/coordinates.html#brahe.coordinates.rotation_enz_to_ellipsoid","title":"rotation_enz_to_ellipsoid  <code>builtin</code>","text":"<pre><code>rotation_enz_to_ellipsoid(x_ellipsoid, angle_format)\n</code></pre> <p>Compute rotation matrix from East-North-Up (ENZ) frame to ellipsoidal coordinates.</p> <p>Calculates the rotation matrix that transforms vectors from the local East-North-Up (ENZ) topocentric frame to an ellipsoidal coordinate frame (geocentric or geodetic) at the specified location.</p> <p>Parameters:</p> Name Type Description Default <code>x_ellipsoid</code> <code>ndarray</code> <p>Ellipsoidal position [latitude, longitude, altitude/radius] where latitude is in radians or degrees, longitude is in radians or degrees.</p> required <code>angle_format</code> <code>AngleFormat</code> <p>Angle format for input angular coordinates (RADIANS or DEGREES).</p> required <p>Returns:</p> Type Description <p>numpy.ndarray: 3x3 rotation matrix from ENZ frame to ellipsoidal frame.</p>"},{"location":"library_api/coordinates.html#brahe.coordinates.rotation_sez_to_ellipsoid","title":"rotation_sez_to_ellipsoid  <code>builtin</code>","text":"<pre><code>rotation_sez_to_ellipsoid(x_ellipsoid, angle_format)\n</code></pre> <p>Compute rotation matrix from South-East-Zenith (SEZ) frame to ellipsoidal coordinates.</p> <p>Calculates the rotation matrix that transforms vectors from the local South-East-Zenith (SEZ) topocentric frame to an ellipsoidal coordinate frame (geocentric or geodetic) at the specified location.</p> <p>Parameters:</p> Name Type Description Default <code>x_ellipsoid</code> <code>ndarray</code> <p>Ellipsoidal position [latitude, longitude, altitude/radius] where latitude is in radians or degrees, longitude is in radians or degrees.</p> required <code>angle_format</code> <code>AngleFormat</code> <p>Angle format for input angular coordinates (RADIANS or DEGREES).</p> required <p>Returns:</p> Type Description <p>numpy.ndarray: 3x3 rotation matrix from SEZ frame to ellipsoidal frame.</p>"},{"location":"library_api/coordinates.html#brahe.coordinates.state_cartesian_to_osculating","title":"state_cartesian_to_osculating  <code>builtin</code>","text":"<pre><code>state_cartesian_to_osculating(x_cart, angle_format)\n</code></pre> <p>Convert Cartesian state to osculating orbital elements.</p> <p>Transforms a state vector from Cartesian position and velocity coordinates to osculating Keplerian orbital elements.</p> <p>Parameters:</p> Name Type Description Default <code>x_cart</code> <code>ndarray</code> <p>Cartesian state [x, y, z, vx, vy, vz] where position is in meters and velocity is in meters per second.</p> required <code>angle_format</code> <code>AngleFormat</code> <p>Angle format for output angular elements (RADIANS or DEGREES).</p> required <p>Returns:</p> Type Description <p>numpy.ndarray: Osculating orbital elements [a, e, i, RAAN, omega, M] where a is semi-major axis (meters), e is eccentricity (dimensionless), i is inclination (radians or degrees), RAAN is right ascension of ascending node (radians or degrees), omega is argument of periapsis (radians or degrees), and M is mean anomaly (radians or degrees).</p>"},{"location":"library_api/coordinates.html#brahe.coordinates.state_osculating_to_cartesian","title":"state_osculating_to_cartesian  <code>builtin</code>","text":"<pre><code>state_osculating_to_cartesian(x_oe, angle_format)\n</code></pre> <p>Convert osculating orbital elements to Cartesian state.</p> <p>Transforms a state vector from osculating Keplerian orbital elements to Cartesian position and velocity coordinates.</p> <p>Parameters:</p> Name Type Description Default <code>x_oe</code> <code>ndarray</code> <p>Osculating orbital elements [a, e, i, RAAN, omega, M] where a is semi-major axis (meters), e is eccentricity (dimensionless), i is inclination (radians or degrees), RAAN is right ascension of ascending node (radians or degrees), omega is argument of periapsis (radians or degrees), and M is mean anomaly (radians or degrees).</p> required <code>angle_format</code> <code>AngleFormat</code> <p>Angle format for angular elements (RADIANS or DEGREES).</p> required <p>Returns:</p> Type Description <p>numpy.ndarray: Cartesian state [x, y, z, vx, vy, vz] where position is in meters and velocity is in meters per second.</p>"},{"location":"library_api/eop.html","title":"Earth Orientation Parameters (EOP) Module","text":"<p>Earth orientation parameter data management and access.</p>"},{"location":"library_api/eop.html#brahe.eop","title":"eop","text":"<p>Earth Orientation Parameters (EOP) Module</p> <p>Earth orientation parameter data management and access.</p> <p>This module provides: - EOP data providers (static built-in data and file-based data) - EOP data download utilities (IERS C04 and standard files) - Global EOP provider management - Access to UT1-UTC, polar motion, and length-of-day data</p> <p>EOP data is required for high-precision reference frame transformations between ECI (Earth-Centered Inertial) and ECEF (Earth-Centered Earth-Fixed) frames.</p>"},{"location":"library_api/eop.html#brahe.eop.download_c04_eop_file","title":"download_c04_eop_file  <code>builtin</code>","text":"<pre><code>download_c04_eop_file(filepath)\n</code></pre> <p>Download latest C04 Earth orientation parameter file. Will attempt to download the latest parameter file to the specified location. Creating any missing directories as required.</p> <p>The download source is the IERS Earth Orientation Data Products</p> <p>Parameters:</p> Name Type Description Default <code>filepath</code> <code>str</code> <p>Path of desired output file</p> required"},{"location":"library_api/eop.html#brahe.eop.download_standard_eop_file","title":"download_standard_eop_file  <code>builtin</code>","text":"<pre><code>download_standard_eop_file(filepath)\n</code></pre> <p>Download latest standard Earth orientation parameter file. Will attempt to download the latest parameter file to the specified location. Creating any missing directories as required.</p> <p>The download source is the IERS Earth Orientation Data Products</p> <p>Parameters:</p> Name Type Description Default <code>filepath</code> <code>str</code> <p>Path of desired output file</p> required"},{"location":"library_api/eop.html#brahe.eop.get_global_dxdy","title":"get_global_dxdy  <code>builtin</code>","text":"<pre><code>get_global_dxdy(mjd)\n</code></pre> <p>Get celestial pole offsets from the global EOP provider.</p> <p>Parameters:</p> Name Type Description Default <code>mjd</code> <code>float</code> <p>Modified Julian Date</p> required <p>Returns:</p> Type Description <p>tuple[float, float]: Celestial pole offsets dx and dy in radians</p>"},{"location":"library_api/eop.html#brahe.eop.get_global_eop","title":"get_global_eop  <code>builtin</code>","text":"<pre><code>get_global_eop(mjd)\n</code></pre> <p>Get all EOP parameters from the global EOP provider.</p> <p>Parameters:</p> Name Type Description Default <code>mjd</code> <code>float</code> <p>Modified Julian Date</p> required <p>Returns:</p> Type Description <p>tuple[float, float, float, float, float, float]: UT1-UTC, pm_x, pm_y, dx, dy, lod</p>"},{"location":"library_api/eop.html#brahe.eop.get_global_eop_extrapolation","title":"get_global_eop_extrapolation  <code>builtin</code>","text":"<pre><code>get_global_eop_extrapolation()\n</code></pre> <p>Get the extrapolation method of the global EOP provider.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>Extrapolation method string</p>"},{"location":"library_api/eop.html#brahe.eop.get_global_eop_initialization","title":"get_global_eop_initialization  <code>builtin</code>","text":"<pre><code>get_global_eop_initialization()\n</code></pre> <p>Check if the global EOP provider is initialized.</p> <p>Returns:</p> Name Type Description <code>bool</code> <p>True if global EOP provider is initialized</p>"},{"location":"library_api/eop.html#brahe.eop.get_global_eop_interpolation","title":"get_global_eop_interpolation  <code>builtin</code>","text":"<pre><code>get_global_eop_interpolation()\n</code></pre> <p>Check if interpolation is enabled in the global EOP provider.</p> <p>Returns:</p> Name Type Description <code>bool</code> <p>True if interpolation is enabled</p>"},{"location":"library_api/eop.html#brahe.eop.get_global_eop_len","title":"get_global_eop_len  <code>builtin</code>","text":"<pre><code>get_global_eop_len()\n</code></pre> <p>Get the number of EOP data points in the global provider.</p> <p>Returns:</p> Name Type Description <code>int</code> <p>Number of EOP data points</p>"},{"location":"library_api/eop.html#brahe.eop.get_global_eop_mjd_last_dxdy","title":"get_global_eop_mjd_last_dxdy  <code>builtin</code>","text":"<pre><code>get_global_eop_mjd_last_dxdy()\n</code></pre> <p>Get the last Modified Julian Date with dx/dy data in the global provider.</p> <p>Returns:</p> Name Type Description <code>float</code> <p>Last MJD with dx/dy data</p>"},{"location":"library_api/eop.html#brahe.eop.get_global_eop_mjd_last_lod","title":"get_global_eop_mjd_last_lod  <code>builtin</code>","text":"<pre><code>get_global_eop_mjd_last_lod()\n</code></pre> <p>Get the last Modified Julian Date with LOD data in the global provider.</p> <p>Returns:</p> Name Type Description <code>float</code> <p>Last MJD with LOD data</p>"},{"location":"library_api/eop.html#brahe.eop.get_global_eop_mjd_max","title":"get_global_eop_mjd_max  <code>builtin</code>","text":"<pre><code>get_global_eop_mjd_max()\n</code></pre> <p>Get the maximum Modified Julian Date in the global EOP dataset.</p> <p>Returns:</p> Name Type Description <code>float</code> <p>Maximum MJD</p>"},{"location":"library_api/eop.html#brahe.eop.get_global_eop_mjd_min","title":"get_global_eop_mjd_min  <code>builtin</code>","text":"<pre><code>get_global_eop_mjd_min()\n</code></pre> <p>Get the minimum Modified Julian Date in the global EOP dataset.</p> <p>Returns:</p> Name Type Description <code>float</code> <p>Minimum MJD</p>"},{"location":"library_api/eop.html#brahe.eop.get_global_eop_type","title":"get_global_eop_type  <code>builtin</code>","text":"<pre><code>get_global_eop_type()\n</code></pre> <p>Get the EOP data type of the global provider.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>EOP type string</p>"},{"location":"library_api/eop.html#brahe.eop.get_global_lod","title":"get_global_lod  <code>builtin</code>","text":"<pre><code>get_global_lod(mjd)\n</code></pre> <p>Get length of day offset from the global EOP provider.</p> <p>Parameters:</p> Name Type Description Default <code>mjd</code> <code>float</code> <p>Modified Julian Date</p> required <p>Returns:</p> Name Type Description <code>float</code> <p>Length of day offset in seconds</p>"},{"location":"library_api/eop.html#brahe.eop.get_global_pm","title":"get_global_pm  <code>builtin</code>","text":"<pre><code>get_global_pm(mjd)\n</code></pre> <p>Get polar motion components from the global EOP provider.</p> <p>Parameters:</p> Name Type Description Default <code>mjd</code> <code>float</code> <p>Modified Julian Date</p> required <p>Returns:</p> Type Description <p>tuple[float, float]: Polar motion x and y components in radians</p>"},{"location":"library_api/eop.html#brahe.eop.get_global_ut1_utc","title":"get_global_ut1_utc  <code>builtin</code>","text":"<pre><code>get_global_ut1_utc(mjd)\n</code></pre> <p>Get UT1-UTC time difference from the global EOP provider.</p> <p>Parameters:</p> Name Type Description Default <code>mjd</code> <code>float</code> <p>Modified Julian Date</p> required <p>Returns:</p> Name Type Description <code>float</code> <p>UT1-UTC time difference in seconds</p>"},{"location":"library_api/eop.html#brahe.eop.set_global_eop_provider_from_file_provider","title":"set_global_eop_provider_from_file_provider  <code>builtin</code>","text":"<pre><code>set_global_eop_provider_from_file_provider(provider)\n</code></pre> <p>Set the global EOP provider using a file-based provider.</p> <p>Parameters:</p> Name Type Description Default <code>provider</code> <code>FileEOPProvider</code> <p>File-based EOP provider to set globally</p> required"},{"location":"library_api/eop.html#brahe.eop.set_global_eop_provider_from_static_provider","title":"set_global_eop_provider_from_static_provider  <code>builtin</code>","text":"<pre><code>set_global_eop_provider_from_static_provider(provider)\n</code></pre> <p>Set the global EOP provider using a static provider.</p> <p>Parameters:</p> Name Type Description Default <code>provider</code> <code>StaticEOPProvider</code> <p>Static EOP provider to set globally</p> required"},{"location":"library_api/frames.html","title":"Reference Frames Module","text":"<p>Reference frame transformations between ECI and ECEF coordinate systems.</p>"},{"location":"library_api/frames.html#brahe.frames","title":"frames","text":"<p>Reference Frames Module</p> <p>Reference frame transformations between ECI and ECEF coordinate systems.</p> <p>This module provides transformations between: - ECI (Earth-Centered Inertial): J2000/GCRF frame - ECEF (Earth-Centered Earth-Fixed): ITRF frame</p> <p>The transformations implement the IAU 2006/2000A precession-nutation model and use Earth Orientation Parameters (EOP) for high-precision conversions.</p> <p>Functions are provided for: - Rotation matrices (bias-precession-nutation, Earth rotation, polar motion) - Position vector transformations - State vector (position + velocity) transformations</p>"},{"location":"library_api/frames.html#brahe.frames.bias_precession_nutation","title":"bias_precession_nutation  <code>builtin</code>","text":"<pre><code>bias_precession_nutation(epc)\n</code></pre> <p>Computes the Bias-Precession-Nutation matrix transforming the GCRS to the CIRS intermediate reference frame. This transformation corrects for the bias, precession, and nutation of Celestial Intermediate Origin (CIO) with respect to inertial space.</p> <p>This formulation computes the Bias-Precession-Nutation correction matrix according using a CIO based model using using the IAU 2006 precession and IAU 2000A nutation models.</p> <p>The function will utilize the global Earth orientation and loaded data to apply corrections to the Celestial Intermediate Pole (CIP) derived from empirical observations.</p> <p>Parameters:</p> Name Type Description Default <code>epc</code> <code>Epoch</code> <p>Epoch instant for computation of transformation matrix</p> required <p>Returns:</p> Type Description <p>numpy.ndarray: 3x3 rotation matrix transforming GCRS -&gt; CIRS</p> References <p>IAU SOFA Tools For Earth Attitude, Example 5.5 http://www.iausofa.org/2021_0512_C/sofa/sofa_pn_c.pdf Software Version 18, 2021-04-18</p>"},{"location":"library_api/frames.html#brahe.frames.earth_rotation","title":"earth_rotation  <code>builtin</code>","text":"<pre><code>earth_rotation(epc)\n</code></pre> <p>Computes the Earth rotation matrix transforming the CIRS to the TIRS intermediate reference frame. This transformation corrects for the Earth rotation.</p> <p>Parameters:</p> Name Type Description Default <code>epc</code> <code>Epoch</code> <p>Epoch instant for computation of transformation matrix</p> required <p>Returns:</p> Type Description <p>numpy.ndarray: 3x3 rotation matrix transforming CIRS -&gt; TIRS</p>"},{"location":"library_api/frames.html#brahe.frames.polar_motion","title":"polar_motion  <code>builtin</code>","text":"<pre><code>polar_motion(epc)\n</code></pre> <p>Computes the Earth rotation matrix transforming the TIRS to the ITRF reference frame.</p> <p>The function will utilize the global Earth orientation and loaded data to apply corrections to compute the polar motion correction based on empirical observations of polar motion drift.</p> <p>Parameters:</p> Name Type Description Default <code>epc</code> <code>Epoch</code> <p>Epoch instant for computation of transformation matrix</p> required <p>Returns:</p> Type Description <p>numpy.ndarray: 3x3 rotation matrix transforming TIRS -&gt; ITRF</p>"},{"location":"library_api/frames.html#brahe.frames.position_ecef_to_eci","title":"position_ecef_to_eci  <code>builtin</code>","text":"<pre><code>position_ecef_to_eci(epc, x)\n</code></pre> <p>Transforms a position vector from the Earth Centered Earth Fixed (ECEF/ITRF) frame to the Earth Centered Inertial (ECI/GCRF) frame.</p> <p>Applies the full IAU 2006/2000A transformation including bias, precession, nutation, Earth rotation, and polar motion corrections using global Earth orientation parameters.</p> <p>Parameters:</p> Name Type Description Default <code>epc</code> <code>Epoch</code> <p>Epoch instant for the transformation</p> required <code>x</code> <code>ndarray</code> <p>Position vector in ECEF frame (m), shape (3,)</p> required <p>Returns:</p> Type Description <p>numpy.ndarray: Position vector in ECI frame (m), shape (3,)</p>"},{"location":"library_api/frames.html#brahe.frames.position_eci_to_ecef","title":"position_eci_to_ecef  <code>builtin</code>","text":"<pre><code>position_eci_to_ecef(epc, x)\n</code></pre> <p>Transforms a position vector from the Earth Centered Inertial (ECI/GCRF) frame to the Earth Centered Earth Fixed (ECEF/ITRF) frame.</p> <p>Applies the full IAU 2006/2000A transformation including bias, precession, nutation, Earth rotation, and polar motion corrections using global Earth orientation parameters.</p> <p>Parameters:</p> Name Type Description Default <code>epc</code> <code>Epoch</code> <p>Epoch instant for the transformation</p> required <code>x</code> <code>ndarray</code> <p>Position vector in ECI frame (m), shape (3,)</p> required <p>Returns:</p> Type Description <p>numpy.ndarray: Position vector in ECEF frame (m), shape (3,)</p>"},{"location":"library_api/frames.html#brahe.frames.rotation_ecef_to_eci","title":"rotation_ecef_to_eci  <code>builtin</code>","text":"<pre><code>rotation_ecef_to_eci(epc)\n</code></pre> <p>Computes the combined rotation matrix from the Earth-fixed to the inertial reference frame. Applies corrections for bias, precession, nutation, Earth-rotation, and polar motion.</p> <p>The transformation is accomplished using the IAU 2006/2000A, CIO-based theory using classical angles. The method as described in section 5.5 of the SOFA C transformation cookbook.</p> <p>The function will utilize the global Earth orientation and loaded data to apply corrections for Celestial Intermidate Pole (CIP) and polar motion drift derived from empirical observations.</p> <p>Parameters:</p> Name Type Description Default <code>epc</code> <code>Epoch</code> <p>Epoch instant for computation of transformation matrix</p> required <p>Returns:</p> Type Description <p>numpy.ndarray: 3x3 rotation matrix transforming ITRF -&gt; GCRF</p>"},{"location":"library_api/frames.html#brahe.frames.rotation_eci_to_ecef","title":"rotation_eci_to_ecef  <code>builtin</code>","text":"<pre><code>rotation_eci_to_ecef(epc)\n</code></pre> <p>Computes the combined rotation matrix from the inertial to the Earth-fixed reference frame. Applies corrections for bias, precession, nutation, Earth-rotation, and polar motion.</p> <p>The transformation is accomplished using the IAU 2006/2000A, CIO-based theory using classical angles. The method as described in section 5.5 of the SOFA C transformation cookbook.</p> <p>The function will utilize the global Earth orientation and loaded data to apply corrections for Celestial Intermidate Pole (CIP) and polar motion drift derived from empirical observations.</p> <p>Parameters:</p> Name Type Description Default <code>epc</code> <code>Epoch</code> <p>Epoch instant for computation of transformation matrix</p> required <p>Returns:</p> Type Description <p>numpy.ndarray: 3x3 rotation matrix transforming GCRF -&gt; ITRF</p>"},{"location":"library_api/frames.html#brahe.frames.state_ecef_to_eci","title":"state_ecef_to_eci  <code>builtin</code>","text":"<pre><code>state_ecef_to_eci(epc, x_ecef)\n</code></pre> <p>Transforms a state vector (position and velocity) from the Earth Centered Earth Fixed (ECEF/ITRF) frame to the Earth Centered Inertial (ECI/GCRF) frame.</p> <p>Applies the full IAU 2006/2000A transformation including bias, precession, nutation, Earth rotation, and polar motion corrections using global Earth orientation parameters. The velocity transformation accounts for the Earth's rotation rate.</p> <p>Parameters:</p> Name Type Description Default <code>epc</code> <code>Epoch</code> <p>Epoch instant for the transformation</p> required <code>x_ecef</code> <code>ndarray</code> <p>State vector in ECEF frame [position (m), velocity (m/s)], shape (6,)</p> required <p>Returns:</p> Type Description <p>numpy.ndarray: State vector in ECI frame [position (m), velocity (m/s)], shape (6,)</p>"},{"location":"library_api/frames.html#brahe.frames.state_eci_to_ecef","title":"state_eci_to_ecef  <code>builtin</code>","text":"<pre><code>state_eci_to_ecef(epc, x_eci)\n</code></pre> <p>Transforms a state vector (position and velocity) from the Earth Centered Inertial (ECI/GCRF) frame to the Earth Centered Earth Fixed (ECEF/ITRF) frame.</p> <p>Applies the full IAU 2006/2000A transformation including bias, precession, nutation, Earth rotation, and polar motion corrections using global Earth orientation parameters. The velocity transformation accounts for the Earth's rotation rate.</p> <p>Parameters:</p> Name Type Description Default <code>epc</code> <code>Epoch</code> <p>Epoch instant for the transformation</p> required <code>x_eci</code> <code>ndarray</code> <p>State vector in ECI frame [position (m), velocity (m/s)], shape (6,)</p> required <p>Returns:</p> Type Description <p>numpy.ndarray: State vector in ECEF frame [position (m), velocity (m/s)], shape (6,)</p>"},{"location":"library_api/time.html","title":"Time Module","text":"<p>Time systems, epochs, and time conversions.</p>"},{"location":"library_api/time.html#brahe.time","title":"time","text":"<p>Time Module</p> <p>Time systems, epochs, and time conversions.</p> <p>This module provides: - Epoch: Core time representation supporting multiple time systems (UTC, TAI, GPS, TT, UT1) - TimeSystem: Enumeration of supported time systems - TimeRange: Time range and iteration utilities - Time conversion functions between different representations (MJD, JD, datetime) - Time system offset calculations</p>"},{"location":"library_api/time.html#brahe.time.GPS","title":"GPS  <code>module-attribute</code>","text":"<pre><code>GPS = TimeSystem.GPS\n</code></pre> <p>Enumeration of supported time systems.</p> <p>Time systems define different conventions for measuring and representing time. Each system has specific uses in astrodynamics and timekeeping applications.</p>"},{"location":"library_api/time.html#brahe.time.TAI","title":"TAI  <code>module-attribute</code>","text":"<pre><code>TAI = TimeSystem.TAI\n</code></pre> <p>Enumeration of supported time systems.</p> <p>Time systems define different conventions for measuring and representing time. Each system has specific uses in astrodynamics and timekeeping applications.</p>"},{"location":"library_api/time.html#brahe.time.TT","title":"TT  <code>module-attribute</code>","text":"<pre><code>TT = TimeSystem.TT\n</code></pre> <p>Enumeration of supported time systems.</p> <p>Time systems define different conventions for measuring and representing time. Each system has specific uses in astrodynamics and timekeeping applications.</p>"},{"location":"library_api/time.html#brahe.time.UT1","title":"UT1  <code>module-attribute</code>","text":"<pre><code>UT1 = TimeSystem.UT1\n</code></pre> <p>Enumeration of supported time systems.</p> <p>Time systems define different conventions for measuring and representing time. Each system has specific uses in astrodynamics and timekeeping applications.</p>"},{"location":"library_api/time.html#brahe.time.UTC","title":"UTC  <code>module-attribute</code>","text":"<pre><code>UTC = TimeSystem.UTC\n</code></pre> <p>Enumeration of supported time systems.</p> <p>Time systems define different conventions for measuring and representing time. Each system has specific uses in astrodynamics and timekeeping applications.</p>"},{"location":"library_api/time.html#brahe.time.datetime_to_jd","title":"datetime_to_jd  <code>builtin</code>","text":"<pre><code>datetime_to_jd(year, month, day, hour, minute, second, nanosecond)\n</code></pre> <p>Convert a Gregorian calendar date to the equivalent Julian Date.</p> <p>Note: Due to the ambiguity of the nature of leap second insertion, this method should not be used if a specific behavior for leap second insertion is expected. This method treats leap seconds as if they don't exist.</p> <p>Parameters:</p> Name Type Description Default <code>year</code> <code>int</code> <p>Year</p> required <code>month</code> <code>int</code> <p>Month (1-12)</p> required <code>day</code> <code>int</code> <p>Day of month (1-31)</p> required <code>hour</code> <code>int</code> <p>Hour (0-23)</p> required <code>minute</code> <code>int</code> <p>Minute (0-59)</p> required <code>second</code> <code>float</code> <p>Second with fractional part</p> required <code>nanosecond</code> <code>float</code> <p>Nanosecond component</p> required <p>Returns:</p> Name Type Description <code>float</code> <p>Julian date of epoch</p>"},{"location":"library_api/time.html#brahe.time.datetime_to_mjd","title":"datetime_to_mjd  <code>builtin</code>","text":"<pre><code>datetime_to_mjd(year, month, day, hour, minute, second, nanosecond)\n</code></pre> <p>Convert a Gregorian calendar date to the equivalent Modified Julian Date.</p> <p>Note: Due to the ambiguity of the nature of leap second insertion, this method should not be used if a specific behavior for leap second insertion is expected. This method treats leap seconds as if they don't exist.</p> <p>Parameters:</p> Name Type Description Default <code>year</code> <code>int</code> <p>Year</p> required <code>month</code> <code>int</code> <p>Month (1-12)</p> required <code>day</code> <code>int</code> <p>Day of month (1-31)</p> required <code>hour</code> <code>int</code> <p>Hour (0-23)</p> required <code>minute</code> <code>int</code> <p>Minute (0-59)</p> required <code>second</code> <code>float</code> <p>Second with fractional part</p> required <code>nanosecond</code> <code>float</code> <p>Nanosecond component</p> required <p>Returns:</p> Name Type Description <code>float</code> <p>Modified Julian date of epoch</p>"},{"location":"library_api/time.html#brahe.time.jd_to_datetime","title":"jd_to_datetime  <code>builtin</code>","text":"<pre><code>jd_to_datetime(jd)\n</code></pre> <p>Convert a Julian Date to the equivalent Gregorian calendar date.</p> <p>Note: Due to the ambiguity of the nature of leap second insertion, this method should not be used if a specific behavior for leap second insertion is expected. This method treats leap seconds as if they don't exist.</p> <p>Parameters:</p> Name Type Description Default <code>jd</code> <code>float</code> <p>Julian date</p> required <p>Returns:</p> Name Type Description <code>tuple</code> <p>A tuple containing (year, month, day, hour, minute, second, nanosecond)</p>"},{"location":"library_api/time.html#brahe.time.mjd_to_datetime","title":"mjd_to_datetime  <code>builtin</code>","text":"<pre><code>mjd_to_datetime(mjd)\n</code></pre> <p>Convert a Modified Julian Date to the equivalent Gregorian calendar date.</p> <p>Note: Due to the ambiguity of the nature of leap second insertion, this method should not be used if a specific behavior for leap second insertion is expected. This method treats leap seconds as if they don't exist.</p> <p>Parameters:</p> Name Type Description Default <code>mjd</code> <code>float</code> <p>Modified Julian date</p> required <p>Returns:</p> Name Type Description <code>tuple</code> <p>A tuple containing (year, month, day, hour, minute, second, nanosecond)</p>"},{"location":"library_api/time.html#brahe.time.time_system_offset_for_datetime","title":"time_system_offset_for_datetime  <code>builtin</code>","text":"<pre><code>time_system_offset_for_datetime(year, month, day, hour, minute, second, nanosecond, time_system_src, time_system_dst)\n</code></pre> <p>Calculate the offset between two time systems for a given Gregorian calendar date.</p> <p>Parameters:</p> Name Type Description Default <code>year</code> <code>int</code> <p>Year</p> required <code>month</code> <code>int</code> <p>Month (1-12)</p> required <code>day</code> <code>int</code> <p>Day of month (1-31)</p> required <code>hour</code> <code>int</code> <p>Hour (0-23)</p> required <code>minute</code> <code>int</code> <p>Minute (0-59)</p> required <code>second</code> <code>float</code> <p>Second with fractional part</p> required <code>nanosecond</code> <code>float</code> <p>Nanosecond component</p> required <code>time_system_src</code> <code>TimeSystem</code> <p>Source time system</p> required <code>time_system_dst</code> <code>TimeSystem</code> <p>Destination time system</p> required <p>Returns:</p> Name Type Description <code>float</code> <p>Offset between time systems in seconds</p>"},{"location":"library_api/time.html#brahe.time.time_system_offset_for_jd","title":"time_system_offset_for_jd  <code>builtin</code>","text":"<pre><code>time_system_offset_for_jd(jd, time_system_src, time_system_dst)\n</code></pre> <p>Calculate the offset between two time systems for a given Julian Date.</p> <p>Parameters:</p> Name Type Description Default <code>jd</code> <code>float</code> <p>Julian date</p> required <code>time_system_src</code> <code>TimeSystem</code> <p>Source time system</p> required <code>time_system_dst</code> <code>TimeSystem</code> <p>Destination time system</p> required <p>Returns:</p> Name Type Description <code>float</code> <p>Offset between time systems in seconds</p>"},{"location":"library_api/time.html#brahe.time.time_system_offset_for_mjd","title":"time_system_offset_for_mjd  <code>builtin</code>","text":"<pre><code>time_system_offset_for_mjd(mjd, time_system_src, time_system_dst)\n</code></pre> <p>Calculate the offset between two time systems for a given Modified Julian Date.</p> <p>Parameters:</p> Name Type Description Default <code>mjd</code> <code>float</code> <p>Modified Julian date</p> required <code>time_system_src</code> <code>TimeSystem</code> <p>Source time system</p> required <code>time_system_dst</code> <code>TimeSystem</code> <p>Destination time system</p> required <p>Returns:</p> Name Type Description <code>float</code> <p>Offset between time systems in seconds</p>"},{"location":"library_api/trajectories.html","title":"Trajectories Module","text":"<p>Trajectory containers and interpolation for orbit propagation.</p>"},{"location":"library_api/trajectories.html#brahe.trajectories","title":"trajectories","text":"<p>Trajectories Module</p> <p>Trajectory containers and interpolation for orbit propagation.</p> <p>This module provides containers for storing and interpolating spacecraft trajectories:</p> <p>Trajectory Types: - Trajectory: Generic trajectory container for arbitrary state vectors - OrbitalTrajectory: Specialized trajectory for orbital states with interpolation - STrajectory6: Static 6-DOF trajectory container</p> <p>Trajectory Features: - Time-series state storage - Interpolation methods (linear, cubic spline) - Support for multiple reference frames (ECI, ECEF) - Support for multiple orbit representations (Cartesian, Keplerian) - Angle format handling (radians, degrees)</p> <p>Enumerations: - OrbitFrame: Reference frame specification - OrbitRepresentation: State representation format - AngleFormat: Angle unit specification - InterpolationMethod: Interpolation algorithm selection</p>"},{"location":"library_api/orbits/orbits.html","title":"Orbits Module","text":"<p>Orbital mechanics, propagators, and Two-Line Element (TLE) handling.</p>"},{"location":"library_api/orbits/orbits.html#brahe.orbits","title":"orbits","text":"<p>Orbits Module</p> <p>Orbital mechanics, propagators, and Two-Line Element (TLE) handling.</p> <p>This module provides:</p> <p>Keplerian Elements: - Orbital element conversions (semi-major axis, mean motion, period) - Anomaly conversions (mean, eccentric, true) - Periapsis and apoapsis calculations - Sun-synchronous orbit calculations</p> <p>Propagators: - SGPPropagator: SGP4/SDP4 propagator for TLE-based orbit prediction - KeplerianPropagator: Analytical Keplerian propagation</p> <p>Two-Line Element (TLE) Support: - TLE parsing and validation - TLE line creation and manipulation - NORAD ID handling (numeric and alpha-5 formats) - Conversion between TLE and Keplerian elements</p> <p>Standard orbital element order: [a, e, i, raan, argp, anomaly] where anomaly is mean anomaly unless otherwise specified.</p>"},{"location":"library_api/orbits/orbits.html#brahe.orbits.anomaly_eccentric_to_mean","title":"anomaly_eccentric_to_mean  <code>builtin</code>","text":"<pre><code>anomaly_eccentric_to_mean(anm_ecc, e, angle_format)\n</code></pre> <p>Converts eccentric anomaly into mean anomaly.</p> <p>Parameters:</p> Name Type Description Default <code>anm_ecc</code> <code>float</code> <p>Eccentric anomaly in radians or degrees.</p> required <code>e</code> <code>float</code> <p>The eccentricity of the astronomical object's orbit (dimensionless).</p> required <code>angle_format</code> <code>AngleFormat</code> <p>Interprets input and returns output in AngleFormat.DEGREES or AngleFormat.RADIANS.</p> required <p>Returns:</p> Name Type Description <code>float</code> <p>Mean anomaly in radians or degrees.</p>"},{"location":"library_api/orbits/orbits.html#brahe.orbits.anomaly_eccentric_to_true","title":"anomaly_eccentric_to_true  <code>builtin</code>","text":"<pre><code>anomaly_eccentric_to_true(anm_ecc, e, angle_format)\n</code></pre> <p>Converts eccentric anomaly into true anomaly.</p> <p>Parameters:</p> Name Type Description Default <code>anm_ecc</code> <code>float</code> <p>Eccentric anomaly in radians or degrees.</p> required <code>e</code> <code>float</code> <p>The eccentricity of the astronomical object's orbit (dimensionless).</p> required <code>angle_format</code> <code>AngleFormat</code> <p>Interprets input and returns output in AngleFormat.DEGREES or AngleFormat.RADIANS.</p> required <p>Returns:</p> Name Type Description <code>float</code> <p>True anomaly in radians or degrees.</p>"},{"location":"library_api/orbits/orbits.html#brahe.orbits.anomaly_mean_to_eccentric","title":"anomaly_mean_to_eccentric  <code>builtin</code>","text":"<pre><code>anomaly_mean_to_eccentric(anm_mean, e, angle_format)\n</code></pre> <p>Converts mean anomaly into eccentric anomaly.</p> <p>Parameters:</p> Name Type Description Default <code>anm_mean</code> <code>float</code> <p>Mean anomaly in radians or degrees.</p> required <code>e</code> <code>float</code> <p>The eccentricity of the astronomical object's orbit (dimensionless).</p> required <code>angle_format</code> <code>AngleFormat</code> <p>Interprets input and returns output in AngleFormat.DEGREES or AngleFormat.RADIANS.</p> required <p>Returns:</p> Name Type Description <code>float</code> <p>Eccentric anomaly in radians or degrees.</p>"},{"location":"library_api/orbits/orbits.html#brahe.orbits.anomaly_mean_to_true","title":"anomaly_mean_to_true  <code>builtin</code>","text":"<pre><code>anomaly_mean_to_true(anm_mean, e, angle_format)\n</code></pre> <p>Converts mean anomaly into true anomaly.</p> <p>Parameters:</p> Name Type Description Default <code>anm_mean</code> <code>float</code> <p>Mean anomaly in radians or degrees.</p> required <code>e</code> <code>float</code> <p>The eccentricity of the astronomical object's orbit (dimensionless).</p> required <code>angle_format</code> <code>AngleFormat</code> <p>Interprets input and returns output in AngleFormat.DEGREES or AngleFormat.RADIANS.</p> required <p>Returns:</p> Name Type Description <code>float</code> <p>True anomaly in radians or degrees.</p>"},{"location":"library_api/orbits/orbits.html#brahe.orbits.anomaly_true_to_eccentric","title":"anomaly_true_to_eccentric  <code>builtin</code>","text":"<pre><code>anomaly_true_to_eccentric(anm_true, e, angle_format)\n</code></pre> <p>Converts true anomaly into eccentric anomaly.</p> <p>Parameters:</p> Name Type Description Default <code>anm_true</code> <code>float</code> <p>True anomaly in radians or degrees.</p> required <code>e</code> <code>float</code> <p>The eccentricity of the astronomical object's orbit (dimensionless).</p> required <code>angle_format</code> <code>AngleFormat</code> <p>Interprets input and returns output in AngleFormat.DEGREES or AngleFormat.RADIANS.</p> required <p>Returns:</p> Name Type Description <code>float</code> <p>Eccentric anomaly in radians or degrees.</p>"},{"location":"library_api/orbits/orbits.html#brahe.orbits.anomaly_true_to_mean","title":"anomaly_true_to_mean  <code>builtin</code>","text":"<pre><code>anomaly_true_to_mean(anm_true, e, angle_format)\n</code></pre> <p>Converts true anomaly into mean anomaly.</p> <p>Parameters:</p> Name Type Description Default <code>anm_true</code> <code>float</code> <p>True anomaly in radians or degrees.</p> required <code>e</code> <code>float</code> <p>The eccentricity of the astronomical object's orbit (dimensionless).</p> required <code>angle_format</code> <code>AngleFormat</code> <p>Interprets input and returns output in AngleFormat.DEGREES or AngleFormat.RADIANS.</p> required <p>Returns:</p> Name Type Description <code>float</code> <p>Mean anomaly in radians or degrees.</p>"},{"location":"library_api/orbits/orbits.html#brahe.orbits.apoapsis_distance","title":"apoapsis_distance  <code>builtin</code>","text":"<pre><code>apoapsis_distance(a, e)\n</code></pre> <p>Calculate the distance of an object at its apoapsis.</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>float</code> <p>The semi-major axis of the astronomical object in meters.</p> required <code>e</code> <code>float</code> <p>The eccentricity of the astronomical object's orbit (dimensionless).</p> required <p>Returns:</p> Name Type Description <code>float</code> <p>The distance of the object at apoapsis in meters.</p>"},{"location":"library_api/orbits/orbits.html#brahe.orbits.apoapsis_velocity","title":"apoapsis_velocity  <code>builtin</code>","text":"<pre><code>apoapsis_velocity(a, e, gm)\n</code></pre> <p>Computes the apoapsis velocity of an astronomical object around a general body.</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>float</code> <p>The semi-major axis of the astronomical object in meters.</p> required <code>e</code> <code>float</code> <p>The eccentricity of the astronomical object's orbit (dimensionless).</p> required <code>gm</code> <code>float</code> <p>The standard gravitational parameter of primary body in m\u00b3/s\u00b2.</p> required <p>Returns:</p> Name Type Description <code>float</code> <p>The magnitude of velocity of the object at apoapsis in m/s.</p>"},{"location":"library_api/orbits/orbits.html#brahe.orbits.apogee_velocity","title":"apogee_velocity  <code>builtin</code>","text":"<pre><code>apogee_velocity(a, e)\n</code></pre> <p>Computes the apogee velocity of an astronomical object around Earth.</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>float</code> <p>The semi-major axis of the astronomical object in meters.</p> required <code>e</code> <code>float</code> <p>The eccentricity of the astronomical object's orbit (dimensionless).</p> required <p>Returns:</p> Name Type Description <code>float</code> <p>The magnitude of velocity of the object at apogee in m/s.</p>"},{"location":"library_api/orbits/orbits.html#brahe.orbits.calculate_tle_line_checksum","title":"calculate_tle_line_checksum  <code>builtin</code>","text":"<pre><code>calculate_tle_line_checksum(line)\n</code></pre> <p>Calculate TLE line checksum.</p> <p>Parameters:</p> Name Type Description Default <code>line</code> <code>str</code> <p>TLE line.</p> required <p>Returns:</p> Name Type Description <code>int</code> <p>Checksum value.</p>"},{"location":"library_api/orbits/orbits.html#brahe.orbits.create_tle_lines","title":"create_tle_lines  <code>builtin</code>","text":"<pre><code>create_tle_lines(epoch, inclination, raan, eccentricity, arg_perigee, mean_anomaly, mean_motion, norad_id, ephemeris_type, element_set_number, revolution_number, classification=None, intl_designator=None, first_derivative=None, second_derivative=None, bstar=None)\n</code></pre> <p>Create complete TLE lines from all parameters.</p> <p>Creates Two-Line Element (TLE) lines from complete set of orbital and administrative parameters. Provides full control over all TLE fields including derivatives and drag terms.</p> <p>Parameters:</p> Name Type Description Default <code>epoch</code> <code>Epoch</code> <p>Epoch of the elements.</p> required <code>inclination</code> <code>float</code> <p>Inclination in degrees.</p> required <code>raan</code> <code>float</code> <p>Right ascension of ascending node in degrees.</p> required <code>eccentricity</code> <code>float</code> <p>Eccentricity (dimensionless).</p> required <code>arg_perigee</code> <code>float</code> <p>Argument of periapsis in degrees.</p> required <code>mean_anomaly</code> <code>float</code> <p>Mean anomaly in degrees.</p> required <code>mean_motion</code> <code>float</code> <p>Mean motion in revolutions per day.</p> required <code>norad_id</code> <code>str</code> <p>NORAD catalog number (supports numeric and Alpha-5 format).</p> required <code>ephemeris_type</code> <code>int</code> <p>Ephemeris type (0-9).</p> required <code>element_set_number</code> <code>int</code> <p>Element set number.</p> required <code>revolution_number</code> <code>int</code> <p>Revolution number at epoch.</p> required <code>classification</code> <code>str</code> <p>Security classification. Defaults to ' '.</p> <code>None</code> <code>intl_designator</code> <code>str</code> <p>International designator. Defaults to ''.</p> <code>None</code> <code>first_derivative</code> <code>float</code> <p>First derivative of mean motion. Defaults to 0.0.</p> <code>None</code> <code>second_derivative</code> <code>float</code> <p>Second derivative of mean motion. Defaults to 0.0.</p> <code>None</code> <code>bstar</code> <code>float</code> <p>BSTAR drag term. Defaults to 0.0.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>tuple</code> <p>A tuple containing (line1, line2) - the two TLE lines as strings.</p>"},{"location":"library_api/orbits/orbits.html#brahe.orbits.epoch_from_tle","title":"epoch_from_tle  <code>builtin</code>","text":"<pre><code>epoch_from_tle(line1)\n</code></pre> <p>Extract Epoch from TLE line 1</p> <p>Extracts and parses the epoch timestamp from the first line of TLE data. The epoch is returned in UTC time system.</p> <p>Parameters:</p> Name Type Description Default <code>line1</code> <code>str</code> <p>First line of TLE data</p> required <p>Returns:</p> Name Type Description <code>Epoch</code> <p>Extracted epoch in UTC time system</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; line1 = \"1 25544U 98067A   21001.50000000  .00001764  00000-0  40967-4 0  9997\"\n&gt;&gt;&gt; epoch = epoch_from_tle(line1)\n&gt;&gt;&gt; epoch.year()\n2021\n</code></pre>"},{"location":"library_api/orbits/orbits.html#brahe.orbits.keplerian_elements_from_tle","title":"keplerian_elements_from_tle  <code>builtin</code>","text":"<pre><code>keplerian_elements_from_tle(line1, line2)\n</code></pre> <p>Extract Keplerian orbital elements from TLE lines.</p> <p>Extracts the standard six Keplerian orbital elements from Two-Line Element (TLE) data. Returns elements in standard order: [a, e, i, raan, argp, M] where angles are in radians.</p> <p>Parameters:</p> Name Type Description Default <code>line1</code> <code>str</code> <p>First line of TLE data.</p> required <code>line2</code> <code>str</code> <p>Second line of TLE data.</p> required <p>Returns:</p> Name Type Description <code>tuple</code> <p>A tuple containing: - epoch (Epoch): Epoch of the TLE data. - elements (numpy.ndarray): Six Keplerian elements [a, e, i, raan, argp, M] where   a is semi-major axis in meters, e is eccentricity (dimensionless), and   i, raan, argp, M are in radians.</p>"},{"location":"library_api/orbits/orbits.html#brahe.orbits.keplerian_elements_to_tle","title":"keplerian_elements_to_tle  <code>builtin</code>","text":"<pre><code>keplerian_elements_to_tle(epoch, elements, norad_id)\n</code></pre> <p>Convert Keplerian elements to TLE lines.</p> <p>Converts standard Keplerian orbital elements to Two-Line Element (TLE) format. Input angles should be in degrees for compatibility with TLE format.</p> <p>Parameters:</p> Name Type Description Default <code>epoch</code> <code>Epoch</code> <p>Epoch of the elements.</p> required <code>elements</code> <code>ndarray</code> <p>Keplerian elements [a (m), e, i (deg), raan (deg), argp (deg), M (deg)].</p> required <code>norad_id</code> <code>str</code> <p>NORAD catalog number (supports numeric and Alpha-5 format).</p> required <p>Returns:</p> Name Type Description <code>tuple</code> <p>A tuple containing (line1, line2) - the two TLE lines as strings.</p>"},{"location":"library_api/orbits/orbits.html#brahe.orbits.mean_motion","title":"mean_motion  <code>builtin</code>","text":"<pre><code>mean_motion(a, angle_format)\n</code></pre> <p>Computes the mean motion of an astronomical object around Earth.</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>float</code> <p>The semi-major axis of the astronomical object in meters.</p> required <code>angle_format</code> <code>AngleFormat</code> <p>Return output in AngleFormat.DEGREES or AngleFormat.RADIANS.</p> required <p>Returns:</p> Name Type Description <code>float</code> <p>The mean motion of the astronomical object in radians or degrees.</p>"},{"location":"library_api/orbits/orbits.html#brahe.orbits.mean_motion_general","title":"mean_motion_general  <code>builtin</code>","text":"<pre><code>mean_motion_general(a, gm, angle_format)\n</code></pre> <p>Computes the mean motion of an astronomical object around a general body given a semi-major axis.</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>float</code> <p>The semi-major axis of the astronomical object in meters.</p> required <code>gm</code> <code>float</code> <p>The standard gravitational parameter of primary body in m\u00b3/s\u00b2.</p> required <code>angle_format</code> <code>AngleFormat</code> <p>Return output in AngleFormat.DEGREES or AngleFormat.RADIANS.</p> required <p>Returns:</p> Name Type Description <code>float</code> <p>The mean motion of the astronomical object in radians or degrees.</p>"},{"location":"library_api/orbits/orbits.html#brahe.orbits.norad_id_alpha5_to_numeric","title":"norad_id_alpha5_to_numeric  <code>builtin</code>","text":"<pre><code>norad_id_alpha5_to_numeric(alpha5_id)\n</code></pre> <p>Convert Alpha-5 NORAD ID to numeric format.</p> <p>Parameters:</p> Name Type Description Default <code>alpha5_id</code> <code>str</code> <p>Alpha-5 format ID (e.g., \"A0001\").</p> required <p>Returns:</p> Name Type Description <code>int</code> <p>Numeric NORAD ID.</p>"},{"location":"library_api/orbits/orbits.html#brahe.orbits.norad_id_numeric_to_alpha5","title":"norad_id_numeric_to_alpha5  <code>builtin</code>","text":"<pre><code>norad_id_numeric_to_alpha5(norad_id)\n</code></pre> <p>Convert numeric NORAD ID to Alpha-5 format.</p> <p>Parameters:</p> Name Type Description Default <code>norad_id</code> <code>int</code> <p>Numeric NORAD ID (100000-339999).</p> required <p>Returns:</p> Name Type Description <code>str</code> <p>Alpha-5 format ID (e.g., \"A0001\").</p>"},{"location":"library_api/orbits/orbits.html#brahe.orbits.orbital_period","title":"orbital_period  <code>builtin</code>","text":"<pre><code>orbital_period(a)\n</code></pre> <p>Computes the orbital period of an object around Earth.</p> <p>Uses rastro.constants.GM_EARTH as the standard gravitational parameter for the calculation.</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>float</code> <p>The semi-major axis of the astronomical object in meters.</p> required <p>Returns:</p> Name Type Description <code>float</code> <p>The orbital period of the astronomical object in seconds.</p>"},{"location":"library_api/orbits/orbits.html#brahe.orbits.orbital_period_general","title":"orbital_period_general  <code>builtin</code>","text":"<pre><code>orbital_period_general(a, gm)\n</code></pre> <p>Computes the orbital period of an astronomical object around a general body.</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>float</code> <p>The semi-major axis of the astronomical object in meters.</p> required <code>gm</code> <code>float</code> <p>The standard gravitational parameter of primary body in m\u00b3/s\u00b2.</p> required <p>Returns:</p> Name Type Description <code>float</code> <p>The orbital period of the astronomical object in seconds.</p>"},{"location":"library_api/orbits/orbits.html#brahe.orbits.parse_norad_id","title":"parse_norad_id  <code>builtin</code>","text":"<pre><code>parse_norad_id(norad_str)\n</code></pre> <p>Parse NORAD ID from string, handling both classic and Alpha-5 formats.</p> <p>Parameters:</p> Name Type Description Default <code>norad_str</code> <code>str</code> <p>NORAD ID string from TLE.</p> required <p>Returns:</p> Name Type Description <code>int</code> <p>Parsed numeric NORAD ID.</p>"},{"location":"library_api/orbits/orbits.html#brahe.orbits.periapsis_distance","title":"periapsis_distance  <code>builtin</code>","text":"<pre><code>periapsis_distance(a, e)\n</code></pre> <p>Calculate the distance of an object at its periapsis.</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>float</code> <p>The semi-major axis of the astronomical object in meters.</p> required <code>e</code> <code>float</code> <p>The eccentricity of the astronomical object's orbit (dimensionless).</p> required <p>Returns:</p> Name Type Description <code>float</code> <p>The distance of the object at periapsis in meters.</p>"},{"location":"library_api/orbits/orbits.html#brahe.orbits.periapsis_velocity","title":"periapsis_velocity  <code>builtin</code>","text":"<pre><code>periapsis_velocity(a, e, gm)\n</code></pre> <p>Computes the periapsis velocity of an astronomical object around a general body.</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>float</code> <p>The semi-major axis of the astronomical object in meters.</p> required <code>e</code> <code>float</code> <p>The eccentricity of the astronomical object's orbit (dimensionless).</p> required <code>gm</code> <code>float</code> <p>The standard gravitational parameter of primary body in m\u00b3/s\u00b2.</p> required <p>Returns:</p> Name Type Description <code>float</code> <p>The magnitude of velocity of the object at periapsis in m/s.</p>"},{"location":"library_api/orbits/orbits.html#brahe.orbits.perigee_velocity","title":"perigee_velocity  <code>builtin</code>","text":"<pre><code>perigee_velocity(a, e)\n</code></pre> <p>Computes the perigee velocity of an astronomical object around Earth.</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>float</code> <p>The semi-major axis of the astronomical object in meters.</p> required <code>e</code> <code>float</code> <p>The eccentricity of the astronomical object's orbit (dimensionless).</p> required <p>Returns:</p> Name Type Description <code>float</code> <p>The magnitude of velocity of the object at perigee in m/s.</p>"},{"location":"library_api/orbits/orbits.html#brahe.orbits.semimajor_axis","title":"semimajor_axis  <code>builtin</code>","text":"<pre><code>semimajor_axis(n, angle_format)\n</code></pre> <p>Computes the semi-major axis of an astronomical object from Earth given the object's mean motion.</p> <p>Parameters:</p> Name Type Description Default <code>n</code> <code>float</code> <p>The mean motion of the astronomical object in radians or degrees.</p> required <code>angle_format</code> <code>AngleFormat</code> <p>Interpret mean motion as AngleFormat.DEGREES or AngleFormat.RADIANS.</p> required <p>Returns:</p> Name Type Description <code>float</code> <p>The semi-major axis of the astronomical object in meters.</p>"},{"location":"library_api/orbits/orbits.html#brahe.orbits.semimajor_axis_from_orbital_period","title":"semimajor_axis_from_orbital_period  <code>builtin</code>","text":"<pre><code>semimajor_axis_from_orbital_period(period)\n</code></pre> <p>Computes the semi-major axis from orbital period around Earth.</p> <p>Parameters:</p> Name Type Description Default <code>period</code> <code>float</code> <p>The orbital period in seconds.</p> required <p>Returns:</p> Name Type Description <code>float</code> <p>The semi-major axis in meters.</p>"},{"location":"library_api/orbits/orbits.html#brahe.orbits.semimajor_axis_from_orbital_period_general","title":"semimajor_axis_from_orbital_period_general  <code>builtin</code>","text":"<pre><code>semimajor_axis_from_orbital_period_general(period, gm)\n</code></pre> <p>Computes the semi-major axis from orbital period for a general body.</p> <p>Parameters:</p> Name Type Description Default <code>period</code> <code>float</code> <p>The orbital period in seconds.</p> required <code>gm</code> <code>float</code> <p>The standard gravitational parameter of primary body in m\u00b3/s\u00b2.</p> required <p>Returns:</p> Name Type Description <code>float</code> <p>The semi-major axis in meters.</p>"},{"location":"library_api/orbits/orbits.html#brahe.orbits.semimajor_axis_general","title":"semimajor_axis_general  <code>builtin</code>","text":"<pre><code>semimajor_axis_general(n, gm, angle_format)\n</code></pre> <p>Computes the semi-major axis of an astronomical object from a general body given the object's mean motion.</p> <p>Parameters:</p> Name Type Description Default <code>n</code> <code>float</code> <p>The mean motion of the astronomical object in radians or degrees.</p> required <code>gm</code> <code>float</code> <p>The standard gravitational parameter of primary body in m\u00b3/s\u00b2.</p> required <code>angle_format</code> <code>AngleFormat</code> <p>Interpret mean motion as AngleFormat.DEGREES or AngleFormat.RADIANS.</p> required <p>Returns:</p> Name Type Description <code>float</code> <p>The semi-major axis of the astronomical object in meters.</p>"},{"location":"library_api/orbits/orbits.html#brahe.orbits.sun_synchronous_inclination","title":"sun_synchronous_inclination  <code>builtin</code>","text":"<pre><code>sun_synchronous_inclination(a, e, angle_format)\n</code></pre> <p>Computes the inclination for a Sun-synchronous orbit around Earth based on the J2 gravitational perturbation.</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>float</code> <p>The semi-major axis of the astronomical object in meters.</p> required <code>e</code> <code>float</code> <p>The eccentricity of the astronomical object's orbit (dimensionless).</p> required <code>angle_format</code> <code>AngleFormat</code> <p>Return output in AngleFormat.DEGREES or AngleFormat.RADIANS.</p> required <p>Returns:</p> Name Type Description <code>float</code> <p>Inclination for a Sun synchronous orbit in degrees or radians.</p>"},{"location":"library_api/orbits/orbits.html#brahe.orbits.validate_tle_line","title":"validate_tle_line  <code>builtin</code>","text":"<pre><code>validate_tle_line(line)\n</code></pre> <p>Validate single TLE line.</p> <p>Parameters:</p> Name Type Description Default <code>line</code> <code>str</code> <p>TLE line to validate.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>True if the line is valid.</p>"},{"location":"library_api/orbits/orbits.html#brahe.orbits.validate_tle_lines","title":"validate_tle_lines  <code>builtin</code>","text":"<pre><code>validate_tle_lines(line1, line2)\n</code></pre> <p>Validate TLE lines.</p> <p>Parameters:</p> Name Type Description Default <code>line1</code> <code>str</code> <p>First line of TLE data.</p> required <code>line2</code> <code>str</code> <p>Second line of TLE data.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>True if both lines are valid.</p>"},{"location":"reference/index.html","title":"Reference","text":""},{"location":"reference/constants.html","title":"Constants","text":"<p>The Constants module provides frequently occuring fundamental mathematical  and astronomical constants.</p>"},{"location":"reference/constants.html#mathematical","title":"Mathematical","text":"<p>Mathematical constants provide quick-reference to common factors.</p> Constant Description <code>DEG2RAD</code> Factor to convert from degrees and radians. <code>RAD2DEG</code> Factor to convert from radians to degrees. <code>AS2RAD</code> Factor to convert from arc-seconds to radians. <code>RAD2AS</code> Factor to convert from radians to arc-seconds."},{"location":"reference/constants.html#time","title":"Time","text":"<p>Time constants are used for conversions between different time systems.</p> Constant Description Value Units Source <code>MJD_ZERO</code> Offset between Modified Julian Date and Julian Date time scales. $t_{mjd} + {mjd}{0} = t{jd}$ $2400000.5$ Days Montenbruck and Gill <sup>1</sup> <code>MJD2000</code> Modified Julian date of J2000 Epoch. January 1, 2000 12:00:00. $51544.5$ Days Montenbruck and Gill <sup>1</sup> <code>GPS_TAI</code> Constant offset from TAI to GPS time scale. $t_{gps} = t_{tai} + \\Delta_{GPS-TAI}$ $19.0$ $s$ Montenbruck and Gill <sup>1</sup> <code>TAI_GPS</code> Constant offset from GPS to TAI time scale. $t_{tai} = t_{gps} + \\Delta_{TAI-GPS}$ $-19.0$ $s$ Montenbruck and Gill <sup>1</sup> <code>TT_TAI</code> Constant offset from TT to TAI time scale. $t_{tt} = t_{tai} + \\Delta_{TT-TAI}$ $32.184$ $s$ Montenbruck and Gill <sup>1</sup> <code>TAI_TT</code> Constant offset from TAI to TT time scale. $t_{tai} = t_{tt} + \\Delta_{TAI-TT}$ $-32.184$ $s$ Montenbruck and Gill <sup>1</sup> <code>GPS_TT</code> Constant offset from GPS to TT time scale. $t_{gps} = t_{tt} + \\Delta_{GPS-TT}$ $-51.184$ $s$ Montenbruck and Gill <sup>1</sup> <code>TT_GPS</code> Constant offset from TT to GPS time scale. $t_{tt} = t_{gps} + \\Delta_{TT-GPS}$ $51.184$ $s$ Montenbruck and Gill <sup>1</sup> <code>GPS_ZERO</code> Modified Julian Date of the start of the GPS time scale in the GPS time scale. This date is January 6, 1980 00:00:00 hours reckoned in the UTC time scale $44244.0$ Days Montenbruck and Gill <sup>1</sup>"},{"location":"reference/constants.html#physical-constants","title":"Physical Constants","text":"<p>Physical constants are fundamental physical constants or properties of  astronomical bodies. While these values are estimated they are considered to  be well known and do not change frequently.</p> Constant Description Value Units Source <code>C_LIGHT</code> Speed of light in vacuum. $299792458.0$ $\\frac{m}{s}$ Vallado <sup>2</sup> <code>AU</code> Astronominal Unit. TDB reference frame compatible value equal to the mean distance of the Earth from the Sun. $1.49597870700 \\times 10^{11}$ $m$ G\u00e9rard and Luzum <sup>3</sup> <code>R_EARTH</code> Earth's semi-major axis as defined by the Grace GGM05S gravity model. $.378136.3$ $m$ Ries et al. <sup>4</sup> <code>WGS84_A</code> Earth geoid model's semi-major axis as defined by the World Geodetic System 1984 edition. $6378137.0$ $m$ NIMA Technical Report <sup>5</sup> <code>WGS84_F</code> Earth geoid model's flattening as defined by the World Geodetic System 1984 edition. $\\frac{1.0}{298.257223563}$ Dimensionless NIMA Technical Report <sup>5</sup> <code>GM_EARTH</code> Gravitational Constant of the Earth. $3.986004415 \\times 10^{14}$ $\\frac{m^3}{s^2}$ Montenbruck and Gill <sup>1</sup> <code>ECC_EARTH</code> Earth geoid model's eccentricity. $8.1819190842622 \\times 10^{-2}$ Dimensionless NIMA Technical Report <sup>5</sup> <code>J2_EARTH</code> Earth's first zonal harmonic. Also known as Earth's oblateness. $0.0010826358191967$ Dimensionless Montenbruck and Gill <sup>1</sup> <code>OMEGA_EARTH</code> Earth's axial rotation rate. $7.292115146706979 \\times 10^{-5}$ $\\frac{rad}{s}$ Vallado <sup>2</sup> <code>GM_SUN</code> Gravitational constant of the Sun. $1.32712440041939400 \\times 10^{20}$ $\\frac{m^3}{s^2}$ Montenbruck and Gill <sup>1</sup> <code>R_SUN</code> Nominal photosphere radius of the Sun. $6.957 \\times 10^{8}$ $m$ Montenbruck and Gill <sup>1</sup> <code>P_SUN</code> Nominal solar radiation pressure at 1 AU. $4.560 \\times 10^{-6}$ $\\frac{N}{m^2}$ Montenbruck and Gill <sup>1</sup> <code>R_SUN</code> Equatorial radius of the Moon. $1.738 \\times 10^{6}$ $m$ Montenbruck and Gill <sup>1</sup> <code>GM_MOON</code> Gravitational constant of the Moon. $4.902800066 \\times 10^{12}$ $\\frac{m^3}{s^2}$ Montenbruck and Gill <sup>1</sup> <code>GM_MERCURY</code> Gravitational constant of the Mercury. $2.2031780 \\times 10^{13}$ $\\frac{m^3}{s^2}$ Montenbruck and Gill <sup>1</sup> <code>GM_VENUS</code> Gravitational constant of the Venus. $3.248585920 \\times 10^{12}$ $\\frac{m^3}{s^2}$ Montenbruck and Gill <sup>1</sup> <code>GM_MARS</code> Gravitational constant of the Mars. $4.282837521 \\times 10^{13}$ $\\frac{m^3}{s^2}$ Montenbruck and Gill <sup>1</sup> <code>GM_JUPITER</code> Gravitational constant of the Jupiter. $1.267127648 \\times 10^{17}$ $\\frac{m^3}{s^2}$ Montenbruck and Gill <sup>1</sup> <code>GM_SATURN</code> Gravitational constant of the Saturn. $3.79405852 \\times 10^{16}$ $\\frac{m^3}{s^2}$ Montenbruck and Gill <sup>1</sup> <code>GM_URANUS</code> Gravitational constant of the Uranus. $5.7945486 \\times 10^{15}$ $\\frac{m^3}{s^2}$ Montenbruck and Gill <sup>1</sup> <code>GM_NEPTUNE</code> Gravitational constant of the Neptune. $6.836527100580 \\times 10^{15}$ $\\frac{m^3}{s^2}$ Montenbruck and Gill <sup>1</sup> <code>GM_PLUTO</code> Gravitational constant of the Pluto. $9.770 \\times 10^{11}$ $\\frac{m^3}{s^2}$ Montenbruck and Gill <sup>1</sup> <ol> <li> <p>O. Montenbruck, and E. Gill, Satellite Orbits: Models, Methods and Applications, 2012\u00a0\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9</p> </li> <li> <p>D. Vallado, Fundamentals of Astrodynamics and Applications (4th Ed.), 2010\u00a0\u21a9\u21a9</p> </li> <li> <p>P. G\u00e9rard and B. Luzum, IERS Technical Note 36, 2010\u00a0\u21a9</p> </li> <li> <p>J. Ries, S. Bettadpur, R. Eanes, Z. Kang, U. Ko, C. McCullough, P. Nagel, N. Pie, S. Poole, T. Richter, H. Save, and B. Tapley, Development and Evaluation of the Global Gravity Model GGM05, 2016\u00a0\u21a9</p> </li> <li> <p>Department of Defense World Geodetic System 1984, Its Definition and Relationships With Local Geodetic Systems\u00a0\u21a9\u21a9\u21a9</p> </li> </ol>"}]}